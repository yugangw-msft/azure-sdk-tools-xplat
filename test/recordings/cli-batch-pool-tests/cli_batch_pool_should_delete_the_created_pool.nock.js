// This file has been autogenerated.

var profile = require('../../../lib/util/profile');

exports.getMockedProfile = function () {
  var newProfile = new profile.Profile();

  newProfile.addSubscription(new profile.Subscription({
    id: '2915bbd6-1252-405f-8173-6c00428146d9',
    name: 'Batch-MatthChr',
    user: {
      name: 'user@domain.example',
      type: 'user'
    },
    tenantId: '72f988bf-86f1-41af-91ab-2d7cd011db47',
    state: 'Enabled',
    registeredProviders: [],
    _eventsCount: '1',
    isDefault: true
  }, newProfile.environments['AzureCloud']));

  return newProfile;
};

exports.setEnvironment = function() {
  process.env['AZURE_BATCH_ACCOUNT'] = 'matthchreastus2';
  process.env['AZURE_BATCH_ENDPOINT'] = 'https://matthchreastus2.eastus2.batch.azure.com';
  
};

exports.scopes = [[function (nock) { 
var result = 
nock('http://matthchreastus2.eastus2.batch.azure.com:443')
  .delete('/pools/xplatCreatedPool?api-version=2016-07-01.3.1&timeout=30')
  .reply(202, "", { 'transfer-encoding': 'chunked',
  server: 'Microsoft-HTTPAPI/2.0',
  'request-id': '1a147214-a4cf-4fa3-932b-bc681dd53dae',
  'strict-transport-security': 'max-age=31536000; includeSubDomains',
  'client-request-id': '61cae5f1-f29d-47c2-ab5a-ee8dfc9ebb45',
  dataserviceversion: '3.0',
  date: 'Thu, 04 Aug 2016 00:01:55 GMT',
  connection: 'close' });
 return result; },
function (nock) { 
var result = 
nock('https://matthchreastus2.eastus2.batch.azure.com:443')
  .delete('/pools/xplatCreatedPool?api-version=2016-07-01.3.1&timeout=30')
  .reply(202, "", { 'transfer-encoding': 'chunked',
  server: 'Microsoft-HTTPAPI/2.0',
  'request-id': '1a147214-a4cf-4fa3-932b-bc681dd53dae',
  'strict-transport-security': 'max-age=31536000; includeSubDomains',
  'client-request-id': '61cae5f1-f29d-47c2-ab5a-ee8dfc9ebb45',
  dataserviceversion: '3.0',
  date: 'Thu, 04 Aug 2016 00:01:55 GMT',
  connection: 'close' });
 return result; },
function (nock) { 
var result = 
nock('http://matthchreastus2.eastus2.batch.azure.com:443')
  .get('/pools/xplatCreatedPool?api-version=2016-07-01.3.1&timeout=30')
  .reply(404, "{\r\n  \"odata.metadata\":\"https://matthchreastus2.eastus2.batch.azure.com/$metadata#Microsoft.Azure.Batch.Protocol.Entities.Container.errors/@Element\",\"code\":\"PoolNotFound\",\"message\":{\r\n    \"lang\":\"en-US\",\"value\":\"The specified pool does not exist.\\nRequestId:9c22420d-ee4e-4959-b590-61c2542d557a\\nTime:2016-08-04T00:01:56.3691421Z\"\r\n  }\r\n}", { 'content-length': '337',
  'content-type': 'application/json;odata=minimalmetadata',
  server: 'Microsoft-HTTPAPI/2.0',
  'request-id': '9c22420d-ee4e-4959-b590-61c2542d557a',
  'strict-transport-security': 'max-age=31536000; includeSubDomains',
  'client-request-id': 'd4370335-b93c-4baa-9f17-ef8c3828aa17',
  dataserviceversion: '3.0',
  date: 'Thu, 04 Aug 2016 00:01:56 GMT',
  connection: 'close' });
 return result; },
function (nock) { 
var result = 
nock('https://matthchreastus2.eastus2.batch.azure.com:443')
  .get('/pools/xplatCreatedPool?api-version=2016-07-01.3.1&timeout=30')
  .reply(404, "{\r\n  \"odata.metadata\":\"https://matthchreastus2.eastus2.batch.azure.com/$metadata#Microsoft.Azure.Batch.Protocol.Entities.Container.errors/@Element\",\"code\":\"PoolNotFound\",\"message\":{\r\n    \"lang\":\"en-US\",\"value\":\"The specified pool does not exist.\\nRequestId:9c22420d-ee4e-4959-b590-61c2542d557a\\nTime:2016-08-04T00:01:56.3691421Z\"\r\n  }\r\n}", { 'content-length': '337',
  'content-type': 'application/json;odata=minimalmetadata',
  server: 'Microsoft-HTTPAPI/2.0',
  'request-id': '9c22420d-ee4e-4959-b590-61c2542d557a',
  'strict-transport-security': 'max-age=31536000; includeSubDomains',
  'client-request-id': 'd4370335-b93c-4baa-9f17-ef8c3828aa17',
  dataserviceversion: '3.0',
  date: 'Thu, 04 Aug 2016 00:01:56 GMT',
  connection: 'close' });
 return result; }]];