/**
 * Copyright (c) Microsoft.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

/*

Generated Command List:

azure vnet abort-migration 
--name $p0

azure vnet commit-migration 
--name $p0

azure vnet prepare-migration 
--name $p0

azure vnet validate-migration 
--name $p0


*/

'use strict';
var profile = require('../../../util/profile');
var utils = require('../../../util/utils');

var $ = utils.getLocaleString;exports.init = function (cli) {

/*
  Network AbortMigration
  --name
*/
  var networkAbortMigration = cli.category('network').description('Commands to invoke service management operations.').category('vnet')
  .description($('Commands to manage your network.  '));
  networkAbortMigration.command('abort-migration [name]')
  .description($('Abort Virtual Network migration api validates and aborts the given virtual network for IaaS Classic to ARM migration.'))
  .usage('[options] <name>')
  .option('-n, --name <name>', $('name'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(name, options, _) {
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    var subscription = profile.current.getSubscription(options.subscription);
    var networkManagementClient = utils.createNetworkClient(subscription);
    var result = networkManagementClient.networks.abortMigration(name, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  Network CommitMigration
  --name
*/
  var networkCommitMigration = cli.category('network').description('Commands to invoke service management operations.').category('vnet')
  .description($('Commands to manage your network.  '));
  networkCommitMigration.command('commit-migration [name]')
  .description($('Commit Virtual Network migration api validates and commits the given virtual network for IaaS Classic to ARM migration.'))
  .usage('[options] <name>')
  .option('-n, --name <name>', $('name'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(name, options, _) {
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    var subscription = profile.current.getSubscription(options.subscription);
    var networkManagementClient = utils.createNetworkClient(subscription);
    var result = networkManagementClient.networks.commitMigration(name, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  Network PrepareMigration
  --name
*/
  var networkPrepareMigration = cli.category('network').description('Commands to invoke service management operations.').category('vnet')
  .description($('Commands to manage your network.  '));
  networkPrepareMigration.command('prepare-migration [name]')
  .description($('Prepare Virtual Network migration api validates and prepare the given virtual network for IaaS Classic to ARM migration.'))
  .usage('[options] <name>')
  .option('-n, --name <name>', $('name'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(name, options, _) {
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    var subscription = profile.current.getSubscription(options.subscription);
    var networkManagementClient = utils.createNetworkClient(subscription);
    var result = networkManagementClient.networks.prepareMigration(name, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  Network ValidateMigration
  --name
*/
  var networkValidateMigration = cli.category('network').description('Commands to invoke service management operations.').category('vnet')
  .description($('Commands to manage your network.  '));
  networkValidateMigration.command('validate-migration [name]')
  .description($('Prepare Virtual Network migration api validates the given virtual network for IaaS Classic to ARM migration.'))
  .usage('[options] <name>')
  .option('-n, --name <name>', $('name'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(name, options, _) {
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    var subscription = profile.current.getSubscription(options.subscription);
    var networkManagementClient = utils.createNetworkClient(subscription);
    var result = networkManagementClient.networks.validateMigration(name, _);
    if (result) {
      cli.output.json(result);
    }
  });


};
