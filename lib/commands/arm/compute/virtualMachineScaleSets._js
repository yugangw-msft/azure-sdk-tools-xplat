/**
 * Copyright (c) Microsoft.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

/*

Generated Command List:

azure vmss config virtual-machine-scale-set set
--parameter-file $f
--parse
--sku $sku
--plan $plan
--upgrade-policy $upgradePolicy
--virtual-machine-profile $virtualMachineProfile
--provisioning-state $provisioningState
--overprovision $overprovision
--single-placement-group $singlePlacementGroup
--id $id
--name $name
--type $type
--location $location
--tags $tags

azure vmss config virtual-machine-scale-set delete
--parameter-file $f
--sku
--plan
--upgrade-policy
--virtual-machine-profile
--provisioning-state
--overprovision
--single-placement-group
--id
--name
--type
--location
--tags

azure vmss config sku set
--parameter-file $f
--parse
--name $name
--tier $tier
--capacity $capacity

azure vmss config sku delete
--parameter-file $f
--name
--tier
--capacity

azure vmss config plan set
--parameter-file $f
--parse
--name $name
--publisher $publisher
--product $product
--promotion-code $promotionCode

azure vmss config plan delete
--parameter-file $f
--name
--publisher
--product
--promotion-code

azure vmss config upgrade-policy set
--parameter-file $f
--parse
--mode $mode

azure vmss config upgrade-policy delete
--parameter-file $f
--mode

azure vmss config virtual-machine-profile set
--parameter-file $f
--parse
--os-profile $osProfile
--storage-profile $storageProfile
--network-profile $networkProfile
--extension-profile $extensionProfile

azure vmss config virtual-machine-profile delete
--parameter-file $f
--os-profile
--storage-profile
--network-profile
--extension-profile

azure vmss config os-profile set
--parameter-file $f
--parse
--computer-name-prefix $computerNamePrefix
--admin-username $adminUsername
--admin-password $adminPassword
--custom-data $customData
--windows-configuration $windowsConfiguration
--linux-configuration $linuxConfiguration
--secrets $secrets

azure vmss config os-profile delete
--parameter-file $f
--computer-name-prefix
--admin-username
--admin-password
--custom-data
--windows-configuration
--linux-configuration
--secrets

azure vmss config windows-configuration set
--parameter-file $f
--parse
--provision-vm-agent $provisionVMAgent
--enable-automatic-updates $enableAutomaticUpdates
--time-zone $timeZone
--additional-unattend-content $additionalUnattendContent
--win-rm $winRM

azure vmss config windows-configuration delete
--parameter-file $f
--provision-vm-agent
--enable-automatic-updates
--time-zone
--additional-unattend-content
--win-rm

azure vmss config additional-unattend-content set
--parameter-file $f
--index $i
--value $v
--parse
--pass-name $passName
--component-name $componentName
--setting-name $settingName
--content $content

azure vmss config additional-unattend-content delete
--parameter-file $f
--index $pindex
--pass-name
--component-name
--setting-name
--content

azure vmss config win-rm set
--parameter-file $f
--parse
--listeners $listeners

azure vmss config win-rm delete
--parameter-file $f
--listeners

azure vmss config listeners set
--parameter-file $f
--index $i
--value $v
--parse
--protocol $protocol
--certificate-url $certificateUrl

azure vmss config listeners delete
--parameter-file $f
--index $pindex
--protocol
--certificate-url

azure vmss config linux-configuration set
--parameter-file $f
--parse
--disable-password-authentication $disablePasswordAuthentication
--ssh $ssh

azure vmss config linux-configuration delete
--parameter-file $f
--disable-password-authentication
--ssh

azure vmss config ssh set
--parameter-file $f
--parse
--public-keys $publicKeys

azure vmss config ssh delete
--parameter-file $f
--public-keys

azure vmss config public-keys set
--parameter-file $f
--index $i
--value $v
--parse
--path $path
--key-data $keyData

azure vmss config public-keys delete
--parameter-file $f
--index $pindex
--path
--key-data

azure vmss config secrets set
--parameter-file $f
--index $i
--value $v
--parse
--source-vault $sourceVault
--vault-certificates $vaultCertificates

azure vmss config secrets delete
--parameter-file $f
--index $pindex
--source-vault
--vault-certificates

azure vmss config source-vault set
--parameter-file $f
--secrets-index $i
--parse
--id $id

azure vmss config source-vault delete
--parameter-file $f
--secrets-index $psecrets-index
--id

azure vmss config vault-certificates set
--parameter-file $f
--index $i
--secrets-index $i
--value $v
--parse
--certificate-url $certificateUrl
--certificate-store $certificateStore

azure vmss config vault-certificates delete
--parameter-file $f
--index $pindex
--secrets-index $psecrets-index
--certificate-url
--certificate-store

azure vmss config storage-profile set
--parameter-file $f
--parse
--image-reference $imageReference
--os-disk $osDisk
--data-disks $dataDisks

azure vmss config storage-profile delete
--parameter-file $f
--image-reference
--os-disk
--data-disks

azure vmss config image-reference set
--parameter-file $f
--parse
--publisher $publisher
--offer $offer
--sku $sku
--version $version
--id $id

azure vmss config image-reference delete
--parameter-file $f
--publisher
--offer
--sku
--version
--id

azure vmss config os-disk set
--parameter-file $f
--parse
--name $name
--caching $caching
--create-option $createOption
--os-type $osType
--image $image
--vhd-containers $vhdContainers
--managed-disk $managedDisk

azure vmss config os-disk delete
--parameter-file $f
--name
--caching
--create-option
--os-type
--image
--vhd-containers
--managed-disk

azure vmss config image set
--parameter-file $f
--parse
--uri $uri

azure vmss config image delete
--parameter-file $f
--uri

azure vmss config vhd-containers set
--parameter-file $f
--index $i
--value $v
--parse

azure vmss config vhd-containers delete
--parameter-file $f
--index $pindex

azure vmss config managed-disk set
--parameter-file $f
--parse
--storage-account-type $storageAccountType

azure vmss config managed-disk delete
--parameter-file $f
--storage-account-type

azure vmss config data-disks set
--parameter-file $f
--index $i
--value $v
--parse
--name $name
--lun $lun
--caching $caching
--create-option $createOption
--disk-size-g-b $diskSizeGB
--managed-disk $managedDisk

azure vmss config data-disks delete
--parameter-file $f
--index $pindex
--name
--lun
--caching
--create-option
--disk-size-g-b
--managed-disk

azure vmss config managed-disk delete
--parameter-file $f
--data-disks-index $pdata-disks-index

azure vmss config network-profile set
--parameter-file $f
--parse
--network-interface-configurations $networkInterfaceConfigurations

azure vmss config network-profile delete
--parameter-file $f
--network-interface-configurations

azure vmss config network-interface-configurations set
--parameter-file $f
--index $i
--value $v
--parse
--name $name
--primary $primary
--ip-configurations $ipConfigurations
--id $id

azure vmss config network-interface-configurations delete
--parameter-file $f
--index $pindex
--name
--primary
--ip-configurations
--id

azure vmss config ip-configurations set
--parameter-file $f
--index $i
--network-interface-configurations-index $i
--value $v
--parse
--name $name
--subnet $subnet
--application-gateway-backend-address-pools $applicationGatewayBackendAddressPools
--load-balancer-backend-address-pools $loadBalancerBackendAddressPools
--load-balancer-inbound-nat-pools $loadBalancerInboundNatPools
--id $id

azure vmss config ip-configurations delete
--parameter-file $f
--index $pindex
--network-interface-configurations-index $pnetwork-interface-configurations-index
--name
--subnet
--application-gateway-backend-address-pools
--load-balancer-backend-address-pools
--load-balancer-inbound-nat-pools
--id

azure vmss config subnet set
--parameter-file $f
--ip-configurations-index $i
--network-interface-configurations-index $i
--parse
--id $id

azure vmss config subnet delete
--parameter-file $f
--ip-configurations-index $pip-configurations-index
--network-interface-configurations-index $pnetwork-interface-configurations-index
--id

azure vmss config application-gateway-backend-address-pools set
--parameter-file $f
--index $i
--ip-configurations-index $i
--network-interface-configurations-index $i
--value $v
--parse
--id $id

azure vmss config application-gateway-backend-address-pools delete
--parameter-file $f
--index $pindex
--ip-configurations-index $pip-configurations-index
--network-interface-configurations-index $pnetwork-interface-configurations-index
--id

azure vmss config load-balancer-backend-address-pools set
--parameter-file $f
--index $i
--ip-configurations-index $i
--network-interface-configurations-index $i
--value $v
--parse
--id $id

azure vmss config load-balancer-backend-address-pools delete
--parameter-file $f
--index $pindex
--ip-configurations-index $pip-configurations-index
--network-interface-configurations-index $pnetwork-interface-configurations-index
--id

azure vmss config load-balancer-inbound-nat-pools set
--parameter-file $f
--index $i
--ip-configurations-index $i
--network-interface-configurations-index $i
--value $v
--parse
--id $id

azure vmss config load-balancer-inbound-nat-pools delete
--parameter-file $f
--index $pindex
--ip-configurations-index $pip-configurations-index
--network-interface-configurations-index $pnetwork-interface-configurations-index
--id

azure vmss config extension-profile set
--parameter-file $f
--parse
--extensions $extensions

azure vmss config extension-profile delete
--parameter-file $f
--extensions

azure vmss config extensions set
--parameter-file $f
--index $i
--value $v
--parse
--name $name
--publisher $publisher
--type $type
--type-handler-version $typeHandlerVersion
--auto-upgrade-minor-version $autoUpgradeMinorVersion
--settings $settings
--protected-settings $protectedSettings
--provisioning-state $provisioningState
--id $id

azure vmss config extensions delete
--parameter-file $f
--index $pindex
--name
--publisher
--type
--type-handler-version
--auto-upgrade-minor-version
--settings
--protected-settings
--provisioning-state
--id

azure vmss create 
--resource-group $p0
--name $p1
--parameters $p2
--parameter-file $f

azure vmss config generate 
--parameter-file $f

azure vmss config patch 
--parameter-file $f

azure vmss deallocate 
--resource-group $p0
--name $p1
--instance-ids $p2

azure vmss delete 
--resource-group $p0
--name $p1

azure vmss delete-instances 
--resource-group $p0
--name $p1
--instance-ids $p2

azure vmss show 
--resource-group $p0
--name $p1

azure vmss get-instance-view 
--resource-group $p0
--name $p1

azure vmss list 
--resource-group $p0

azure vmss list-skus 
--resource-group $p0
--name $p1

azure vmss power-off 
--resource-group $p0
--name $p1
--instance-ids $p2

azure vmss reimage 
--resource-group $p0
--name $p1

azure vmss reimage-all 
--resource-group $p0
--name $p1

azure vmss restart 
--resource-group $p0
--name $p1
--instance-ids $p2

azure vmss start 
--resource-group $p0
--name $p1
--instance-ids $p2

azure vmss update-instances 
--resource-group $p0
--name $p1
--instance-ids $p2


*/

'use strict';var fs = require('fs');
var jsonpatch = require('fast-json-patch');

var profile = require('../../../util/profile');
var utils = require('../../../util/utils');

var $ = utils.getLocaleString;function beautify(jsonText) {
  var obj = JSON.parse(jsonText);
  return JSON.stringify(obj, null, 2);
}
function capitalize(str) {
  if (str && str.length >= 1) {
    return str.charAt(0).toUpperCase() + str.slice(1);
  }
  else {
    return str;
  }
}

function makeTuple(k, v, d) {
  return { key : k, value : v, depth : d };
}

function displayImpl(o, key, depth, arr) {
  if ((!!o) && (o.constructor === Object || o.constructor === Array)) {
    arr.push(makeTuple(key, '', depth));
    var len = 0;
    Object.keys(o).forEach(function(k1) {
      var v1 = o[k1];
      var p1 = o.constructor === Array ? '#' : '';
      var w = displayImpl(v1, p1 + k1, depth + 1, arr);
      if (w > len) {
        len = w;
      }
    });
    return len;
  }
  else {
    arr.push(makeTuple(key, o ? o.toString() : '', depth));
    return depth * 2 + (key ? key.toString().length : 0);
  }
}

function display(cli, o) {
  var arr = [];
  var width = displayImpl(o, '', 0, arr);
  for (var t in arr) {
    var prebuf = new Array(arr[t].depth * 2).join(' ');
    var key = arr[t].key ? arr[t].key : '';
    var postLen = width - (prebuf.length + key.length);
    var postbuf = new Array(postLen > 0 ? postLen : 0).join(' ');
    var str = prebuf + capitalize(key) + postbuf;
    if (arr[t].value) {
      str += ' : ' + arr[t].value;
    }
    cli.output.data(str);
  }
}exports.init = function (cli) {

/*
  VirtualMachineScaleSets CreateOrUpdate
  --resource-group
  --name
  --parameters
=============================================
{
  "sku":{
    "name":"",
    "tier":"",
    "capacity":null
  },
  "plan":{
    "name":"",
    "publisher":"",
    "product":"",
    "promotionCode":""
  },
  "upgradePolicy":{
    "mode":null
  },
  "virtualMachineProfile":{
    "osProfile":{
      "computerNamePrefix":"",
      "adminUsername":"",
      "adminPassword":"",
      "customData":"",
      "windowsConfiguration":{
        "provisionVMAgent":null,
        "enableAutomaticUpdates":null,
        "timeZone":"",
        "additionalUnattendContent":[
          {
            "passName":null,
            "componentName":null,
            "settingName":null,
            "content":""
          }
        ],
        "winRM":{
          "listeners":[
            {
              "protocol":null,
              "certificateUrl":""
            }
          ]
        }
      },
      "linuxConfiguration":{
        "disablePasswordAuthentication":null,
        "ssh":{
          "publicKeys":[
            {
              "path":"",
              "keyData":""
            }
          ]
        }
      },
      "secrets":[
        {
          "sourceVault":{
            "id":""
          },
          "vaultCertificates":[
            {
              "certificateUrl":"",
              "certificateStore":""
            }
          ]
        }
      ]
    },
    "storageProfile":{
      "imageReference":{
        "publisher":"",
        "offer":"",
        "sku":"",
        "version":"",
        "id":""
      },
      "osDisk":{
        "name":"",
        "caching":null,
        "createOption":"",
        "osType":null,
        "image":{
          "uri":""
        },
        "vhdContainers":[
          ""
        ],
        "managedDisk":{
          "storageAccountType":null
        }
      },
      "dataDisks":[
        {
          "name":"",
          "lun":"",
          "caching":null,
          "createOption":"",
          "diskSizeGB":null,
          "managedDisk":{
            "storageAccountType":null
          }
        }
      ]
    },
    "networkProfile":{
      "networkInterfaceConfigurations":[
        {
          "name":"",
          "primary":null,
          "ipConfigurations":[
            {
              "name":"",
              "subnet":{
                "id":""
              },
              "applicationGatewayBackendAddressPools":[
                {
                  "id":""
                }
              ],
              "loadBalancerBackendAddressPools":[
                {
                  "id":""
                }
              ],
              "loadBalancerInboundNatPools":[
                {
                  "id":""
                }
              ],
              "id":""
            }
          ],
          "id":""
        }
      ]
    },
    "extensionProfile":{
      "extensions":[
        {
          "name":"",
          "publisher":"",
          "type":"",
          "typeHandlerVersion":"",
          "autoUpgradeMinorVersion":null,
          "settings":{
          },
          "protectedSettings":{
          },
          "provisioningState":"",
          "id":null
        }
      ]
    }
  },
  "provisioningState":"",
  "overprovision":null,
  "singlePlacementGroup":null,
  "id":null,
  "name":null,
  "type":null,
  "location":"",
  "tags":{
  }
}
*/
  var virtualMachineScaleSetsCreateOrUpdate = cli.category('vmss')
  .description($('Commands to manage your virtual machine scale sets.  '));
  virtualMachineScaleSetsCreateOrUpdate.command('create [resource-group] [name] [parameters]')
  .description($('Create or update a VM scale set.'))
  .usage('[options] <resource-group> <name> <parameters>')
  .option('-g, --resource-group <resource-group>', $('resource-group'))
  .option('-n, --name <name>', $('name'))
  .option('-p, --parameters <parameters>', $('A string of parameters in JSON format'))
  .option('--parameter-file <parameter-file>', $('The text file that contains input parameter object in JSON format'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(resourceGroup, name, parameters, options, _) {
    if (!resourceGroup) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource-group : '), resourceGroup, _);
    }

    cli.output.verbose('resourceGroup = ' + resourceGroup);
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    cli.output.verbose('parameters = ' + parameters);
    var parametersObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      parametersObj = JSON.parse(fileContent);
    }
    else {
      parametersObj = JSON.parse(parameters);
    }
    cli.output.verbose('parametersObj = ' + JSON.stringify(parametersObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSets.createOrUpdate(resourceGroup, name, parametersObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
  var virtualMachineScaleSetsCreateOrUpdatecreateOrUpdateParameters2 = virtualMachineScaleSetsCreateOrUpdate.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  virtualMachineScaleSetsCreateOrUpdatecreateOrUpdateParameters2.command('create')
  .description($('Generate virtualMachineScaleSetsCreateOrUpdate parameter string or files.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .execute(function(options, _) {
    cli.output.verbose('{\"sku\":{\"name\":\"\",\"tier\":\"\",\"capacity\":null},\"plan\":{\"name\":\"\",\"publisher\":\"\",\"product\":\"\",\"promotionCode\":\"\"},\"upgradePolicy\":{\"mode\":null},\"virtualMachineProfile\":{\"osProfile\":{\"computerNamePrefix\":\"\",\"adminUsername\":\"\",\"adminPassword\":\"\",\"customData\":\"\",\"windowsConfiguration\":{\"provisionVMAgent\":null,\"enableAutomaticUpdates\":null,\"timeZone\":\"\",\"additionalUnattendContent\":[{\"passName\":null,\"componentName\":null,\"settingName\":null,\"content\":\"\"}],\"winRM\":{\"listeners\":[{\"protocol\":null,\"certificateUrl\":\"\"}]}},\"linuxConfiguration\":{\"disablePasswordAuthentication\":null,\"ssh\":{\"publicKeys\":[{\"path\":\"\",\"keyData\":\"\"}]}},\"secrets\":[{\"sourceVault\":{\"id\":\"\"},\"vaultCertificates\":[{\"certificateUrl\":\"\",\"certificateStore\":\"\"}]}]},\"storageProfile\":{\"imageReference\":{\"publisher\":\"\",\"offer\":\"\",\"sku\":\"\",\"version\":\"\",\"id\":\"\"},\"osDisk\":{\"name\":\"\",\"caching\":null,\"createOption\":\"\",\"osType\":null,\"image\":{\"uri\":\"\"},\"vhdContainers\":[\"\"],\"managedDisk\":{\"storageAccountType\":null}},\"dataDisks\":[{\"name\":\"\",\"lun\":\"\",\"caching\":null,\"createOption\":\"\",\"diskSizeGB\":null,\"managedDisk\":{\"storageAccountType\":null}}]},\"networkProfile\":{\"networkInterfaceConfigurations\":[{\"name\":\"\",\"primary\":null,\"ipConfigurations\":[{\"name\":\"\",\"subnet\":{\"id\":\"\"},\"applicationGatewayBackendAddressPools\":[{\"id\":\"\"}],\"loadBalancerBackendAddressPools\":[{\"id\":\"\"}],\"loadBalancerInboundNatPools\":[{\"id\":\"\"}],\"id\":\"\"}],\"id\":\"\"}]},\"extensionProfile\":{\"extensions\":[{\"name\":\"\",\"publisher\":\"\",\"type\":\"\",\"typeHandlerVersion\":\"\",\"autoUpgradeMinorVersion\":null,\"settings\":{},\"protectedSettings\":{},\"provisioningState\":\"\",\"id\":null}]}},\"provisioningState\":\"\",\"overprovision\":null,\"singlePlacementGroup\":null,\"id\":null,\"name\":null,\"type\":null,\"location\":\"\",\"tags\":{}}', _);
    var filePath = 'virtualMachineScaleSetsCreateOrUpdate_createOrUpdate.json';
    if (options.parameterFile) {
      filePath = options.parameterFile;
    }
    fs.writeFileSync(filePath, beautify('{\r\n\"sku\":{\r\n\"name\":\"\",\r\n\"tier\":\"\",\r\n\"capacity\":null\r\n},\r\n\"plan\":{\r\n\"name\":\"\",\r\n\"publisher\":\"\",\r\n\"product\":\"\",\r\n\"promotionCode\":\"\"\r\n},\r\n\"upgradePolicy\":{\r\n\"mode\":null\r\n},\r\n\"virtualMachineProfile\":{\r\n\"osProfile\":{\r\n\"computerNamePrefix\":\"\",\r\n\"adminUsername\":\"\",\r\n\"adminPassword\":\"\",\r\n\"customData\":\"\",\r\n\"windowsConfiguration\":{\r\n\"provisionVMAgent\":null,\r\n\"enableAutomaticUpdates\":null,\r\n\"timeZone\":\"\",\r\n\"additionalUnattendContent\":[\r\n{\r\n\"passName\":null,\r\n\"componentName\":null,\r\n\"settingName\":null,\r\n\"content\":\"\"\r\n}\r\n],\r\n\"winRM\":{\r\n\"listeners\":[\r\n{\r\n\"protocol\":null,\r\n\"certificateUrl\":\"\"\r\n}\r\n]\r\n}\r\n},\r\n\"linuxConfiguration\":{\r\n\"disablePasswordAuthentication\":null,\r\n\"ssh\":{\r\n\"publicKeys\":[\r\n{\r\n\"path\":\"\",\r\n\"keyData\":\"\"\r\n}\r\n]\r\n}\r\n},\r\n\"secrets\":[\r\n{\r\n\"sourceVault\":{\r\n\"id\":\"\"\r\n},\r\n\"vaultCertificates\":[\r\n{\r\n\"certificateUrl\":\"\",\r\n\"certificateStore\":\"\"\r\n}\r\n]\r\n}\r\n]\r\n},\r\n\"storageProfile\":{\r\n\"imageReference\":{\r\n\"publisher\":\"\",\r\n\"offer\":\"\",\r\n\"sku\":\"\",\r\n\"version\":\"\",\r\n\"id\":\"\"\r\n},\r\n\"osDisk\":{\r\n\"name\":\"\",\r\n\"caching\":null,\r\n\"createOption\":\"\",\r\n\"osType\":null,\r\n\"image\":{\r\n\"uri\":\"\"\r\n},\r\n\"vhdContainers\":[\r\n\"\"\r\n],\r\n\"managedDisk\":{\r\n\"storageAccountType\":null\r\n}\r\n},\r\n\"dataDisks\":[\r\n{\r\n\"name\":\"\",\r\n\"lun\":\"\",\r\n\"caching\":null,\r\n\"createOption\":\"\",\r\n\"diskSizeGB\":null,\r\n\"managedDisk\":{\r\n\"storageAccountType\":null\r\n}\r\n}\r\n]\r\n},\r\n\"networkProfile\":{\r\n\"networkInterfaceConfigurations\":[\r\n{\r\n\"name\":\"\",\r\n\"primary\":null,\r\n\"ipConfigurations\":[\r\n{\r\n\"name\":\"\",\r\n\"subnet\":{\r\n\"id\":\"\"\r\n},\r\n\"applicationGatewayBackendAddressPools\":[\r\n{\r\n\"id\":\"\"\r\n}\r\n],\r\n\"loadBalancerBackendAddressPools\":[\r\n{\r\n\"id\":\"\"\r\n}\r\n],\r\n\"loadBalancerInboundNatPools\":[\r\n{\r\n\"id\":\"\"\r\n}\r\n],\r\n\"id\":\"\"\r\n}\r\n],\r\n\"id\":\"\"\r\n}\r\n]\r\n},\r\n\"extensionProfile\":{\r\n\"extensions\":[\r\n{\r\n\"name\":\"\",\r\n\"publisher\":\"\",\r\n\"type\":\"\",\r\n\"typeHandlerVersion\":\"\",\r\n\"autoUpgradeMinorVersion\":null,\r\n\"settings\":{\r\n},\r\n\"protectedSettings\":{\r\n},\r\n\"provisioningState\":\"\",\r\n\"id\":null\r\n}\r\n]\r\n}\r\n},\r\n\"provisioningState\":\"\",\r\n\"overprovision\":null,\r\n\"singlePlacementGroup\":null,\r\n\"id\":null,\r\n\"name\":null,\r\n\"type\":null,\r\n\"location\":\"\",\r\n\"tags\":{\r\n}\r\n}'));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file output to: ' + filePath);
    cli.output.verbose('=====================================');
  });

  virtualMachineScaleSetsCreateOrUpdatecreateOrUpdateParameters2.command('patch')
  .description($('Command to patch virtualMachineScaleSetsCreateOrUpdate parameter JSON file.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--operation <operation>', $('The JSON patch operation: add, remove, or replace.'))
  .option('--path <path>', $('The JSON data path, e.g.: \"foo/1\".'))
  .option('--value <value>', $('The JSON value.'))
  .option('--parse', $('Parse the JSON value to object.'))
  .execute(function(options, _) {
    cli.output.verbose(options.parameterFile, _);
    cli.output.verbose(options.operation);
    cli.output.verbose(options.path);
    cli.output.verbose(options.value);
    cli.output.verbose(options.parse);
    if (options.parse) {
      options.value = JSON.parse(options.value);
    }
    cli.output.verbose(options.value);
    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    if (options.operation == 'add') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    else if (options.operation == 'remove') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    else if (options.operation == 'replace') {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config set virtual-machine-scale-set
  var catparametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineScaleSet0 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineScaleSet0 = catparametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineScaleSet0.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineScaleSet0 = parametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineScaleSet0.category('virtual-machine-scale-set')
  .description($('Commands to configure virtual-machine-scale-set of vmss in config file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineScaleSet0.command('set')
  .description($('Set virtual-machine-scale-set in config string or files, e.g. \r\n{\r\n  "sku":{\r\n    "name":"",\r\n    "tier":"",\r\n    "capacity":null\r\n  },\r\n  "plan":{\r\n    "name":"",\r\n    "publisher":"",\r\n    "product":"",\r\n    "promotionCode":""\r\n  },\r\n  "upgradePolicy":{\r\n    "mode":null\r\n  },\r\n  "virtualMachineProfile":{\r\n    "osProfile":{\r\n      "computerNamePrefix":"",\r\n      "adminUsername":"",\r\n      "adminPassword":"",\r\n      "customData":"",\r\n      "windowsConfiguration":{\r\n        "provisionVMAgent":null,\r\n        "enableAutomaticUpdates":null,\r\n        "timeZone":"",\r\n        "additionalUnattendContent":[\r\n          {\r\n            "passName":null,\r\n            "componentName":null,\r\n            "settingName":null,\r\n            "content":""\r\n          }\r\n        ],\r\n        "winRM":{\r\n          "listeners":[\r\n            {\r\n              "protocol":null,\r\n              "certificateUrl":""\r\n            }\r\n          ]\r\n        }\r\n      },\r\n      "linuxConfiguration":{\r\n        "disablePasswordAuthentication":null,\r\n        "ssh":{\r\n          "publicKeys":[\r\n            {\r\n              "path":"",\r\n              "keyData":""\r\n            }\r\n          ]\r\n        }\r\n      },\r\n      "secrets":[\r\n        {\r\n          "sourceVault":{\r\n            "id":""\r\n          },\r\n          "vaultCertificates":[\r\n            {\r\n              "certificateUrl":"",\r\n              "certificateStore":""\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    },\r\n    "storageProfile":{\r\n      "imageReference":{\r\n        "publisher":"",\r\n        "offer":"",\r\n        "sku":"",\r\n        "version":"",\r\n        "id":""\r\n      },\r\n      "osDisk":{\r\n        "name":"",\r\n        "caching":null,\r\n        "createOption":"",\r\n        "osType":null,\r\n        "image":{\r\n          "uri":""\r\n        },\r\n        "vhdContainers":[\r\n          ""\r\n        ],\r\n        "managedDisk":{\r\n          "storageAccountType":null\r\n        }\r\n      },\r\n      "dataDisks":[\r\n        {\r\n          "name":"",\r\n          "lun":"",\r\n          "caching":null,\r\n          "createOption":"",\r\n          "diskSizeGB":null,\r\n          "managedDisk":{\r\n            "storageAccountType":null\r\n          }\r\n        }\r\n      ]\r\n    },\r\n    "networkProfile":{\r\n      "networkInterfaceConfigurations":[\r\n        {\r\n          "name":"",\r\n          "primary":null,\r\n          "ipConfigurations":[\r\n            {\r\n              "name":"",\r\n              "subnet":{\r\n                "id":""\r\n              },\r\n              "applicationGatewayBackendAddressPools":[\r\n                {\r\n                  "id":""\r\n                }\r\n              ],\r\n              "loadBalancerBackendAddressPools":[\r\n                {\r\n                  "id":""\r\n                }\r\n              ],\r\n              "loadBalancerInboundNatPools":[\r\n                {\r\n                  "id":""\r\n                }\r\n              ],\r\n              "id":""\r\n            }\r\n          ],\r\n          "id":""\r\n        }\r\n      ]\r\n    },\r\n    "extensionProfile":{\r\n      "extensions":[\r\n        {\r\n          "name":"",\r\n          "publisher":"",\r\n          "type":"",\r\n          "typeHandlerVersion":"",\r\n          "autoUpgradeMinorVersion":null,\r\n          "settings":{\r\n          },\r\n          "protectedSettings":{\r\n          },\r\n          "provisioningState":"",\r\n          "id":null\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  "provisioningState":"",\r\n  "overprovision":null,\r\n  "singlePlacementGroup":null,\r\n  "id":null,\r\n  "name":null,\r\n  "type":null,\r\n  "location":"",\r\n  "tags":{\r\n  }\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--sku <sku>', $('Set the sku value.'))
  .option('--plan <plan>', $('Set the plan value.'))
  .option('--upgrade-policy <upgradePolicy>', $('Set the upgrade-policy value.'))
  .option('--virtual-machine-profile <virtualMachineProfile>', $('Set the virtual-machine-profile value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--overprovision <overprovision>', $('Set the overprovision value.'))
  .option('--single-placement-group <singlePlacementGroup>', $('Set the single-placement-group value.'))
  .option('--id <id>', $('Set the id value.'))
  .option('--name <name>', $('Set the name value.'))
  .option('--type <type>', $('Set the type value.'))
  .option('--location <location>', $('Set the location value.'))
  .option('--tags <tags>', $('Set the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'sku';
    if (options.sku) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.sku);
      cli.output.verbose('================================================');
      if (options.parse && options.sku) {
        options.sku = JSON.parse(options.sku);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sku}]);
    }
    paramPath = options.path + '/' + 'plan';
    if (options.plan) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.plan);
      cli.output.verbose('================================================');
      if (options.parse && options.plan) {
        options.plan = JSON.parse(options.plan);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.plan}]);
    }
    paramPath = options.path + '/' + 'upgradePolicy';
    if (options.upgradePolicy) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.upgradePolicy);
      cli.output.verbose('================================================');
      if (options.parse && options.upgradePolicy) {
        options.upgradePolicy = JSON.parse(options.upgradePolicy);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.upgradePolicy}]);
    }
    paramPath = options.path + '/' + 'virtualMachineProfile';
    if (options.virtualMachineProfile) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.virtualMachineProfile);
      cli.output.verbose('================================================');
      if (options.parse && options.virtualMachineProfile) {
        options.virtualMachineProfile = JSON.parse(options.virtualMachineProfile);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.virtualMachineProfile}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    if (options.provisioningState) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.provisioningState);
      cli.output.verbose('================================================');
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'overprovision';
    if (options.overprovision) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.overprovision);
      cli.output.verbose('================================================');
      if (options.parse && options.overprovision) {
        options.overprovision = JSON.parse(options.overprovision);
      }
      options.overprovision = JSON.parse(options.overprovision);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.overprovision}]);
    }
    paramPath = options.path + '/' + 'singlePlacementGroup';
    if (options.singlePlacementGroup) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.singlePlacementGroup);
      cli.output.verbose('================================================');
      if (options.parse && options.singlePlacementGroup) {
        options.singlePlacementGroup = JSON.parse(options.singlePlacementGroup);
      }
      options.singlePlacementGroup = JSON.parse(options.singlePlacementGroup);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.singlePlacementGroup}]);
    }
    paramPath = options.path + '/' + 'id';
    if (options.id) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.id);
      cli.output.verbose('================================================');
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'type';
    if (options.type) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.type);
      cli.output.verbose('================================================');
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = options.path + '/' + 'location';
    if (options.location) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.location);
      cli.output.verbose('================================================');
      if (options.parse && options.location) {
        options.location = JSON.parse(options.location);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.location}]);
    }
    paramPath = options.path + '/' + 'tags';
    if (options.tags) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.tags);
      cli.output.verbose('================================================');
      if (options.parse && options.tags) {
        options.tags = JSON.parse(options.tags);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tags}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete virtual-machine-scale-set
  var catparametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineScaleSet1 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineScaleSet1 = catparametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineScaleSet1.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineScaleSet1 = parametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineScaleSet1.category('virtual-machine-scale-set')
  .description($('Commands to configure virtual-machine-scale-set of vmss in config file.'));
  deleteparametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineScaleSet1.command('delete')
  .description($('Remove virtual-machine-scale-set in config string or files, e.g. \r\n{\r\n  "sku":{\r\n    "name":"",\r\n    "tier":"",\r\n    "capacity":null\r\n  },\r\n  "plan":{\r\n    "name":"",\r\n    "publisher":"",\r\n    "product":"",\r\n    "promotionCode":""\r\n  },\r\n  "upgradePolicy":{\r\n    "mode":null\r\n  },\r\n  "virtualMachineProfile":{\r\n    "osProfile":{\r\n      "computerNamePrefix":"",\r\n      "adminUsername":"",\r\n      "adminPassword":"",\r\n      "customData":"",\r\n      "windowsConfiguration":{\r\n        "provisionVMAgent":null,\r\n        "enableAutomaticUpdates":null,\r\n        "timeZone":"",\r\n        "additionalUnattendContent":[\r\n          {\r\n            "passName":null,\r\n            "componentName":null,\r\n            "settingName":null,\r\n            "content":""\r\n          }\r\n        ],\r\n        "winRM":{\r\n          "listeners":[\r\n            {\r\n              "protocol":null,\r\n              "certificateUrl":""\r\n            }\r\n          ]\r\n        }\r\n      },\r\n      "linuxConfiguration":{\r\n        "disablePasswordAuthentication":null,\r\n        "ssh":{\r\n          "publicKeys":[\r\n            {\r\n              "path":"",\r\n              "keyData":""\r\n            }\r\n          ]\r\n        }\r\n      },\r\n      "secrets":[\r\n        {\r\n          "sourceVault":{\r\n            "id":""\r\n          },\r\n          "vaultCertificates":[\r\n            {\r\n              "certificateUrl":"",\r\n              "certificateStore":""\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    },\r\n    "storageProfile":{\r\n      "imageReference":{\r\n        "publisher":"",\r\n        "offer":"",\r\n        "sku":"",\r\n        "version":"",\r\n        "id":""\r\n      },\r\n      "osDisk":{\r\n        "name":"",\r\n        "caching":null,\r\n        "createOption":"",\r\n        "osType":null,\r\n        "image":{\r\n          "uri":""\r\n        },\r\n        "vhdContainers":[\r\n          ""\r\n        ],\r\n        "managedDisk":{\r\n          "storageAccountType":null\r\n        }\r\n      },\r\n      "dataDisks":[\r\n        {\r\n          "name":"",\r\n          "lun":"",\r\n          "caching":null,\r\n          "createOption":"",\r\n          "diskSizeGB":null,\r\n          "managedDisk":{\r\n            "storageAccountType":null\r\n          }\r\n        }\r\n      ]\r\n    },\r\n    "networkProfile":{\r\n      "networkInterfaceConfigurations":[\r\n        {\r\n          "name":"",\r\n          "primary":null,\r\n          "ipConfigurations":[\r\n            {\r\n              "name":"",\r\n              "subnet":{\r\n                "id":""\r\n              },\r\n              "applicationGatewayBackendAddressPools":[\r\n                {\r\n                  "id":""\r\n                }\r\n              ],\r\n              "loadBalancerBackendAddressPools":[\r\n                {\r\n                  "id":""\r\n                }\r\n              ],\r\n              "loadBalancerInboundNatPools":[\r\n                {\r\n                  "id":""\r\n                }\r\n              ],\r\n              "id":""\r\n            }\r\n          ],\r\n          "id":""\r\n        }\r\n      ]\r\n    },\r\n    "extensionProfile":{\r\n      "extensions":[\r\n        {\r\n          "name":"",\r\n          "publisher":"",\r\n          "type":"",\r\n          "typeHandlerVersion":"",\r\n          "autoUpgradeMinorVersion":null,\r\n          "settings":{\r\n          },\r\n          "protectedSettings":{\r\n          },\r\n          "provisioningState":"",\r\n          "id":null\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  "provisioningState":"",\r\n  "overprovision":null,\r\n  "singlePlacementGroup":null,\r\n  "id":null,\r\n  "name":null,\r\n  "type":null,\r\n  "location":"",\r\n  "tags":{\r\n  }\r\n}\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--sku', $('Remove the sku value.'))
  .option('--plan', $('Remove the plan value.'))
  .option('--upgrade-policy', $('Remove the upgrade-policy value.'))
  .option('--virtual-machine-profile', $('Remove the virtual-machine-profile value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--overprovision', $('Remove the overprovision value.'))
  .option('--single-placement-group', $('Remove the single-placement-group value.'))
  .option('--id', $('Remove the id value.'))
  .option('--name', $('Remove the name value.'))
  .option('--type', $('Remove the type value.'))
  .option('--location', $('Remove the location value.'))
  .option('--tags', $('Remove the tags value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '';
    var anySubItem = false || options.sku || options.plan || options.upgradePolicy || options.virtualMachineProfile || options.provisioningState || options.overprovision || options.singlePlacementGroup || options.id || options.name || options.type || options.location || options.tags;
    if (anySubItem) {
      var subItemPath = null;
      if (options.sku) {
        subItemPath = options.path + '/sku';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.plan) {
        subItemPath = options.path + '/plan';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.upgradePolicy) {
        subItemPath = options.path + '/upgradePolicy';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.virtualMachineProfile) {
        subItemPath = options.path + '/virtualMachineProfile';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.overprovision) {
        subItemPath = options.path + '/overprovision';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.singlePlacementGroup) {
        subItemPath = options.path + '/singlePlacementGroup';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        subItemPath = options.path + '/type';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.location) {
        subItemPath = options.path + '/location';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.tags) {
        subItemPath = options.path + '/tags';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set sku
  var catparametersCreateOrUpdateVirtualMachineScaleSetsSku0S = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsSku0S = catparametersCreateOrUpdateVirtualMachineScaleSetsSku0S.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsSku0S = parametersCreateOrUpdateVirtualMachineScaleSetsSku0S.category('sku')
  .description($('Commands to configure sku of vmss in config file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsSku0S.command('set')
  .description($('Set sku in config string or files, e.g. \r\n         {\r\n           ...\r\n           "sku" : {\r\n             "name":"",\r\n             "tier":"",\r\n             "capacity":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--name <name>', $('Set the name value.'))
  .option('--tier <tier>', $('Set the tier value.'))
  .option('--capacity <capacity>', $('Set the capacity value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/sku';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'tier';
    if (options.tier) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.tier);
      cli.output.verbose('================================================');
      if (options.parse && options.tier) {
        options.tier = JSON.parse(options.tier);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.tier}]);
    }
    paramPath = options.path + '/' + 'capacity';
    if (options.capacity) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.capacity);
      cli.output.verbose('================================================');
      if (options.parse && options.capacity) {
        options.capacity = JSON.parse(options.capacity);
      }
      options.capacity = JSON.parse(options.capacity);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.capacity}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete sku
  var catparametersCreateOrUpdateVirtualMachineScaleSetsSku1S = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsSku1S = catparametersCreateOrUpdateVirtualMachineScaleSetsSku1S.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsSku1S = parametersCreateOrUpdateVirtualMachineScaleSetsSku1S.category('sku')
  .description($('Commands to configure sku of vmss in config file.'));
  deleteparametersCreateOrUpdateVirtualMachineScaleSetsSku1S.command('delete')
  .description($('Remove sku in config string or files, e.g. \r\n         {\r\n           ...\r\n           "sku" : {\r\n             "name":"",\r\n             "tier":"",\r\n             "capacity":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--name', $('Remove the name value.'))
  .option('--tier', $('Remove the tier value.'))
  .option('--capacity', $('Remove the capacity value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/sku';
    var anySubItem = false || options.name || options.tier || options.capacity;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.tier) {
        subItemPath = options.path + '/tier';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.capacity) {
        subItemPath = options.path + '/capacity';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set plan
  var catparametersCreateOrUpdateVirtualMachineScaleSetsPlan0P = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsPlan0P = catparametersCreateOrUpdateVirtualMachineScaleSetsPlan0P.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsPlan0P = parametersCreateOrUpdateVirtualMachineScaleSetsPlan0P.category('plan')
  .description($('Commands to configure plan of vmss in config file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsPlan0P.command('set')
  .description($('Set plan in config string or files, e.g. \r\n         {\r\n           ...\r\n           "plan" : {\r\n             "name":"",\r\n             "publisher":"",\r\n             "product":"",\r\n             "promotionCode":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--name <name>', $('Set the name value.'))
  .option('--publisher <publisher>', $('Set the publisher value.'))
  .option('--product <product>', $('Set the product value.'))
  .option('--promotion-code <promotionCode>', $('Set the promotion-code value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/plan';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'publisher';
    if (options.publisher) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.publisher);
      cli.output.verbose('================================================');
      if (options.parse && options.publisher) {
        options.publisher = JSON.parse(options.publisher);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisher}]);
    }
    paramPath = options.path + '/' + 'product';
    if (options.product) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.product);
      cli.output.verbose('================================================');
      if (options.parse && options.product) {
        options.product = JSON.parse(options.product);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.product}]);
    }
    paramPath = options.path + '/' + 'promotionCode';
    if (options.promotionCode) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.promotionCode);
      cli.output.verbose('================================================');
      if (options.parse && options.promotionCode) {
        options.promotionCode = JSON.parse(options.promotionCode);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.promotionCode}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete plan
  var catparametersCreateOrUpdateVirtualMachineScaleSetsPlan1P = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsPlan1P = catparametersCreateOrUpdateVirtualMachineScaleSetsPlan1P.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsPlan1P = parametersCreateOrUpdateVirtualMachineScaleSetsPlan1P.category('plan')
  .description($('Commands to configure plan of vmss in config file.'));
  deleteparametersCreateOrUpdateVirtualMachineScaleSetsPlan1P.command('delete')
  .description($('Remove plan in config string or files, e.g. \r\n         {\r\n           ...\r\n           "plan" : {\r\n             "name":"",\r\n             "publisher":"",\r\n             "product":"",\r\n             "promotionCode":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--name', $('Remove the name value.'))
  .option('--publisher', $('Remove the publisher value.'))
  .option('--product', $('Remove the product value.'))
  .option('--promotion-code', $('Remove the promotion-code value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/plan';
    var anySubItem = false || options.name || options.publisher || options.product || options.promotionCode;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publisher) {
        subItemPath = options.path + '/publisher';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.product) {
        subItemPath = options.path + '/product';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.promotionCode) {
        subItemPath = options.path + '/promotionCode';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set upgrade-policy
  var catparametersCreateOrUpdateVirtualMachineScaleSetsUpgradePolicy0UP = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsUpgradePolicy0UP = catparametersCreateOrUpdateVirtualMachineScaleSetsUpgradePolicy0UP.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsUpgradePolicy0UP = parametersCreateOrUpdateVirtualMachineScaleSetsUpgradePolicy0UP.category('upgrade-policy')
  .description($('Commands to configure upgrade-policy of vmss in config file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsUpgradePolicy0UP.command('set')
  .description($('Set upgrade-policy in config string or files, e.g. \r\n         {\r\n           ...\r\n           "upgradePolicy" : {\r\n             "mode":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--mode <mode>', $('Set the mode value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/upgradePolicy';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'mode';
    if (options.mode) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.mode);
      cli.output.verbose('================================================');
      if (options.parse && options.mode) {
        options.mode = JSON.parse(options.mode);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.mode}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete upgrade-policy
  var catparametersCreateOrUpdateVirtualMachineScaleSetsUpgradePolicy1UP = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsUpgradePolicy1UP = catparametersCreateOrUpdateVirtualMachineScaleSetsUpgradePolicy1UP.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsUpgradePolicy1UP = parametersCreateOrUpdateVirtualMachineScaleSetsUpgradePolicy1UP.category('upgrade-policy')
  .description($('Commands to configure upgrade-policy of vmss in config file.'));
  deleteparametersCreateOrUpdateVirtualMachineScaleSetsUpgradePolicy1UP.command('delete')
  .description($('Remove upgrade-policy in config string or files, e.g. \r\n         {\r\n           ...\r\n           "upgradePolicy" : {\r\n             "mode":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--mode', $('Remove the mode value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/upgradePolicy';
    var anySubItem = false || options.mode;
    if (anySubItem) {
      var subItemPath = null;
      if (options.mode) {
        subItemPath = options.path + '/mode';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set virtual-machine-profile
  var catparametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineProfile0VMP = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineProfile0VMP = catparametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineProfile0VMP.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineProfile0VMP = parametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineProfile0VMP.category('virtual-machine-profile')
  .description($('Commands to configure virtual-machine-profile of vmss in config file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineProfile0VMP.command('set')
  .description($('Set virtual-machine-profile in config string or files, e.g. \r\n         {\r\n           ...\r\n           "virtualMachineProfile" : {\r\n             "osProfile":{\r\n               "computerNamePrefix":"",\r\n               "adminUsername":"",\r\n               "adminPassword":"",\r\n               "customData":"",\r\n               "windowsConfiguration":{\r\n                 "provisionVMAgent":null,\r\n                 "enableAutomaticUpdates":null,\r\n                 "timeZone":"",\r\n                 "additionalUnattendContent":[\r\n                   {\r\n                     "passName":null,\r\n                     "componentName":null,\r\n                     "settingName":null,\r\n                     "content":""\r\n                   }\r\n                 ],\r\n                 "winRM":{\r\n                   "listeners":[\r\n                     {\r\n                       "protocol":null,\r\n                       "certificateUrl":""\r\n                     }\r\n                   ]\r\n                 }\r\n               },\r\n               "linuxConfiguration":{\r\n                 "disablePasswordAuthentication":null,\r\n                 "ssh":{\r\n                   "publicKeys":[\r\n                     {\r\n                       "path":"",\r\n                       "keyData":""\r\n                     }\r\n                   ]\r\n                 }\r\n               },\r\n               "secrets":[\r\n                 {\r\n                   "sourceVault":{\r\n                     "id":""\r\n                   },\r\n                   "vaultCertificates":[\r\n                     {\r\n                       "certificateUrl":"",\r\n                       "certificateStore":""\r\n                     }\r\n                   ]\r\n                 }\r\n               ]\r\n             },\r\n             "storageProfile":{\r\n               "imageReference":{\r\n                 "publisher":"",\r\n                 "offer":"",\r\n                 "sku":"",\r\n                 "version":"",\r\n                 "id":""\r\n               },\r\n               "osDisk":{\r\n                 "name":"",\r\n                 "caching":null,\r\n                 "createOption":"",\r\n                 "osType":null,\r\n                 "image":{\r\n                   "uri":""\r\n                 },\r\n                 "vhdContainers":[\r\n                   ""\r\n                 ],\r\n                 "managedDisk":{\r\n                   "storageAccountType":null\r\n                 }\r\n               },\r\n               "dataDisks":[\r\n                 {\r\n                   "name":"",\r\n                   "lun":"",\r\n                   "caching":null,\r\n                   "createOption":"",\r\n                   "diskSizeGB":null,\r\n                   "managedDisk":{\r\n                     "storageAccountType":null\r\n                   }\r\n                 }\r\n               ]\r\n             },\r\n             "networkProfile":{\r\n               "networkInterfaceConfigurations":[\r\n                 {\r\n                   "name":"",\r\n                   "primary":null,\r\n                   "ipConfigurations":[\r\n                     {\r\n                       "name":"",\r\n                       "subnet":{\r\n                         "id":""\r\n                       },\r\n                       "applicationGatewayBackendAddressPools":[\r\n                         {\r\n                           "id":""\r\n                         }\r\n                       ],\r\n                       "loadBalancerBackendAddressPools":[\r\n                         {\r\n                           "id":""\r\n                         }\r\n                       ],\r\n                       "loadBalancerInboundNatPools":[\r\n                         {\r\n                           "id":""\r\n                         }\r\n                       ],\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "id":""\r\n                 }\r\n               ]\r\n             },\r\n             "extensionProfile":{\r\n               "extensions":[\r\n                 {\r\n                   "name":"",\r\n                   "publisher":"",\r\n                   "type":"",\r\n                   "typeHandlerVersion":"",\r\n                   "autoUpgradeMinorVersion":null,\r\n                   "settings":{\r\n                   },\r\n                   "protectedSettings":{\r\n                   },\r\n                   "provisioningState":"",\r\n                   "id":null\r\n                 }\r\n               ]\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--os-profile <osProfile>', $('Set the os-profile value.'))
  .option('--storage-profile <storageProfile>', $('Set the storage-profile value.'))
  .option('--network-profile <networkProfile>', $('Set the network-profile value.'))
  .option('--extension-profile <extensionProfile>', $('Set the extension-profile value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'osProfile';
    if (options.osProfile) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.osProfile);
      cli.output.verbose('================================================');
      if (options.parse && options.osProfile) {
        options.osProfile = JSON.parse(options.osProfile);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.osProfile}]);
    }
    paramPath = options.path + '/' + 'storageProfile';
    if (options.storageProfile) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.storageProfile);
      cli.output.verbose('================================================');
      if (options.parse && options.storageProfile) {
        options.storageProfile = JSON.parse(options.storageProfile);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storageProfile}]);
    }
    paramPath = options.path + '/' + 'networkProfile';
    if (options.networkProfile) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.networkProfile);
      cli.output.verbose('================================================');
      if (options.parse && options.networkProfile) {
        options.networkProfile = JSON.parse(options.networkProfile);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkProfile}]);
    }
    paramPath = options.path + '/' + 'extensionProfile';
    if (options.extensionProfile) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.extensionProfile);
      cli.output.verbose('================================================');
      if (options.parse && options.extensionProfile) {
        options.extensionProfile = JSON.parse(options.extensionProfile);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensionProfile}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete virtual-machine-profile
  var catparametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineProfile1VMP = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineProfile1VMP = catparametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineProfile1VMP.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineProfile1VMP = parametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineProfile1VMP.category('virtual-machine-profile')
  .description($('Commands to configure virtual-machine-profile of vmss in config file.'));
  deleteparametersCreateOrUpdateVirtualMachineScaleSetsVirtualMachineProfile1VMP.command('delete')
  .description($('Remove virtual-machine-profile in config string or files, e.g. \r\n         {\r\n           ...\r\n           "virtualMachineProfile" : {\r\n             "osProfile":{\r\n               "computerNamePrefix":"",\r\n               "adminUsername":"",\r\n               "adminPassword":"",\r\n               "customData":"",\r\n               "windowsConfiguration":{\r\n                 "provisionVMAgent":null,\r\n                 "enableAutomaticUpdates":null,\r\n                 "timeZone":"",\r\n                 "additionalUnattendContent":[\r\n                   {\r\n                     "passName":null,\r\n                     "componentName":null,\r\n                     "settingName":null,\r\n                     "content":""\r\n                   }\r\n                 ],\r\n                 "winRM":{\r\n                   "listeners":[\r\n                     {\r\n                       "protocol":null,\r\n                       "certificateUrl":""\r\n                     }\r\n                   ]\r\n                 }\r\n               },\r\n               "linuxConfiguration":{\r\n                 "disablePasswordAuthentication":null,\r\n                 "ssh":{\r\n                   "publicKeys":[\r\n                     {\r\n                       "path":"",\r\n                       "keyData":""\r\n                     }\r\n                   ]\r\n                 }\r\n               },\r\n               "secrets":[\r\n                 {\r\n                   "sourceVault":{\r\n                     "id":""\r\n                   },\r\n                   "vaultCertificates":[\r\n                     {\r\n                       "certificateUrl":"",\r\n                       "certificateStore":""\r\n                     }\r\n                   ]\r\n                 }\r\n               ]\r\n             },\r\n             "storageProfile":{\r\n               "imageReference":{\r\n                 "publisher":"",\r\n                 "offer":"",\r\n                 "sku":"",\r\n                 "version":"",\r\n                 "id":""\r\n               },\r\n               "osDisk":{\r\n                 "name":"",\r\n                 "caching":null,\r\n                 "createOption":"",\r\n                 "osType":null,\r\n                 "image":{\r\n                   "uri":""\r\n                 },\r\n                 "vhdContainers":[\r\n                   ""\r\n                 ],\r\n                 "managedDisk":{\r\n                   "storageAccountType":null\r\n                 }\r\n               },\r\n               "dataDisks":[\r\n                 {\r\n                   "name":"",\r\n                   "lun":"",\r\n                   "caching":null,\r\n                   "createOption":"",\r\n                   "diskSizeGB":null,\r\n                   "managedDisk":{\r\n                     "storageAccountType":null\r\n                   }\r\n                 }\r\n               ]\r\n             },\r\n             "networkProfile":{\r\n               "networkInterfaceConfigurations":[\r\n                 {\r\n                   "name":"",\r\n                   "primary":null,\r\n                   "ipConfigurations":[\r\n                     {\r\n                       "name":"",\r\n                       "subnet":{\r\n                         "id":""\r\n                       },\r\n                       "applicationGatewayBackendAddressPools":[\r\n                         {\r\n                           "id":""\r\n                         }\r\n                       ],\r\n                       "loadBalancerBackendAddressPools":[\r\n                         {\r\n                           "id":""\r\n                         }\r\n                       ],\r\n                       "loadBalancerInboundNatPools":[\r\n                         {\r\n                           "id":""\r\n                         }\r\n                       ],\r\n                       "id":""\r\n                     }\r\n                   ],\r\n                   "id":""\r\n                 }\r\n               ]\r\n             },\r\n             "extensionProfile":{\r\n               "extensions":[\r\n                 {\r\n                   "name":"",\r\n                   "publisher":"",\r\n                   "type":"",\r\n                   "typeHandlerVersion":"",\r\n                   "autoUpgradeMinorVersion":null,\r\n                   "settings":{\r\n                   },\r\n                   "protectedSettings":{\r\n                   },\r\n                   "provisioningState":"",\r\n                   "id":null\r\n                 }\r\n               ]\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--os-profile', $('Remove the os-profile value.'))
  .option('--storage-profile', $('Remove the storage-profile value.'))
  .option('--network-profile', $('Remove the network-profile value.'))
  .option('--extension-profile', $('Remove the extension-profile value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile';
    var anySubItem = false || options.osProfile || options.storageProfile || options.networkProfile || options.extensionProfile;
    if (anySubItem) {
      var subItemPath = null;
      if (options.osProfile) {
        subItemPath = options.path + '/osProfile';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.storageProfile) {
        subItemPath = options.path + '/storageProfile';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.networkProfile) {
        subItemPath = options.path + '/networkProfile';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.extensionProfile) {
        subItemPath = options.path + '/extensionProfile';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set os-profile
  var catparametersCreateOrUpdateVirtualMachineScaleSetsOsProfile0VMPoP = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsOsProfile0VMPoP = catparametersCreateOrUpdateVirtualMachineScaleSetsOsProfile0VMPoP.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsOsProfile0VMPoP = parametersCreateOrUpdateVirtualMachineScaleSetsOsProfile0VMPoP.category('os-profile')
  .description($('Commands to configure os-profile of vmss in config file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsOsProfile0VMPoP.command('set')
  .description($('Set os-profile in config string or files, e.g. \r\n         {\r\n           ...\r\n           "osProfile" : {\r\n             "computerNamePrefix":"",\r\n             "adminUsername":"",\r\n             "adminPassword":"",\r\n             "customData":"",\r\n             "windowsConfiguration":{\r\n               "provisionVMAgent":null,\r\n               "enableAutomaticUpdates":null,\r\n               "timeZone":"",\r\n               "additionalUnattendContent":[\r\n                 {\r\n                   "passName":null,\r\n                   "componentName":null,\r\n                   "settingName":null,\r\n                   "content":""\r\n                 }\r\n               ],\r\n               "winRM":{\r\n                 "listeners":[\r\n                   {\r\n                     "protocol":null,\r\n                     "certificateUrl":""\r\n                   }\r\n                 ]\r\n               }\r\n             },\r\n             "linuxConfiguration":{\r\n               "disablePasswordAuthentication":null,\r\n               "ssh":{\r\n                 "publicKeys":[\r\n                   {\r\n                     "path":"",\r\n                     "keyData":""\r\n                   }\r\n                 ]\r\n               }\r\n             },\r\n             "secrets":[\r\n               {\r\n                 "sourceVault":{\r\n                   "id":""\r\n                 },\r\n                 "vaultCertificates":[\r\n                   {\r\n                     "certificateUrl":"",\r\n                     "certificateStore":""\r\n                   }\r\n                 ]\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--computer-name-prefix <computerNamePrefix>', $('Set the computer-name-prefix value.'))
  .option('--admin-username <adminUsername>', $('Set the admin-username value.'))
  .option('--admin-password <adminPassword>', $('Set the admin-password value.'))
  .option('--custom-data <customData>', $('Set the custom-data value.'))
  .option('--windows-configuration <windowsConfiguration>', $('Set the windows-configuration value.'))
  .option('--linux-configuration <linuxConfiguration>', $('Set the linux-configuration value.'))
  .option('--secrets <secrets>', $('Set the secrets value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/osProfile';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'computerNamePrefix';
    if (options.computerNamePrefix) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.computerNamePrefix);
      cli.output.verbose('================================================');
      if (options.parse && options.computerNamePrefix) {
        options.computerNamePrefix = JSON.parse(options.computerNamePrefix);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.computerNamePrefix}]);
    }
    paramPath = options.path + '/' + 'adminUsername';
    if (options.adminUsername) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.adminUsername);
      cli.output.verbose('================================================');
      if (options.parse && options.adminUsername) {
        options.adminUsername = JSON.parse(options.adminUsername);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminUsername}]);
    }
    paramPath = options.path + '/' + 'adminPassword';
    if (options.adminPassword) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.adminPassword);
      cli.output.verbose('================================================');
      if (options.parse && options.adminPassword) {
        options.adminPassword = JSON.parse(options.adminPassword);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.adminPassword}]);
    }
    paramPath = options.path + '/' + 'customData';
    if (options.customData) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.customData);
      cli.output.verbose('================================================');
      if (options.parse && options.customData) {
        options.customData = JSON.parse(options.customData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.customData}]);
    }
    paramPath = options.path + '/' + 'windowsConfiguration';
    if (options.windowsConfiguration) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.windowsConfiguration);
      cli.output.verbose('================================================');
      if (options.parse && options.windowsConfiguration) {
        options.windowsConfiguration = JSON.parse(options.windowsConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.windowsConfiguration}]);
    }
    paramPath = options.path + '/' + 'linuxConfiguration';
    if (options.linuxConfiguration) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.linuxConfiguration);
      cli.output.verbose('================================================');
      if (options.parse && options.linuxConfiguration) {
        options.linuxConfiguration = JSON.parse(options.linuxConfiguration);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.linuxConfiguration}]);
    }
    paramPath = options.path + '/' + 'secrets';
    if (options.secrets) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.secrets);
      cli.output.verbose('================================================');
      if (options.parse && options.secrets) {
        options.secrets = JSON.parse(options.secrets);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.secrets}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete os-profile
  var catparametersCreateOrUpdateVirtualMachineScaleSetsOsProfile1VMPoP = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsOsProfile1VMPoP = catparametersCreateOrUpdateVirtualMachineScaleSetsOsProfile1VMPoP.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsOsProfile1VMPoP = parametersCreateOrUpdateVirtualMachineScaleSetsOsProfile1VMPoP.category('os-profile')
  .description($('Commands to configure os-profile of vmss in config file.'));
  deleteparametersCreateOrUpdateVirtualMachineScaleSetsOsProfile1VMPoP.command('delete')
  .description($('Remove os-profile in config string or files, e.g. \r\n         {\r\n           ...\r\n           "osProfile" : {\r\n             "computerNamePrefix":"",\r\n             "adminUsername":"",\r\n             "adminPassword":"",\r\n             "customData":"",\r\n             "windowsConfiguration":{\r\n               "provisionVMAgent":null,\r\n               "enableAutomaticUpdates":null,\r\n               "timeZone":"",\r\n               "additionalUnattendContent":[\r\n                 {\r\n                   "passName":null,\r\n                   "componentName":null,\r\n                   "settingName":null,\r\n                   "content":""\r\n                 }\r\n               ],\r\n               "winRM":{\r\n                 "listeners":[\r\n                   {\r\n                     "protocol":null,\r\n                     "certificateUrl":""\r\n                   }\r\n                 ]\r\n               }\r\n             },\r\n             "linuxConfiguration":{\r\n               "disablePasswordAuthentication":null,\r\n               "ssh":{\r\n                 "publicKeys":[\r\n                   {\r\n                     "path":"",\r\n                     "keyData":""\r\n                   }\r\n                 ]\r\n               }\r\n             },\r\n             "secrets":[\r\n               {\r\n                 "sourceVault":{\r\n                   "id":""\r\n                 },\r\n                 "vaultCertificates":[\r\n                   {\r\n                     "certificateUrl":"",\r\n                     "certificateStore":""\r\n                   }\r\n                 ]\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--computer-name-prefix', $('Remove the computer-name-prefix value.'))
  .option('--admin-username', $('Remove the admin-username value.'))
  .option('--admin-password', $('Remove the admin-password value.'))
  .option('--custom-data', $('Remove the custom-data value.'))
  .option('--windows-configuration', $('Remove the windows-configuration value.'))
  .option('--linux-configuration', $('Remove the linux-configuration value.'))
  .option('--secrets', $('Remove the secrets value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/osProfile';
    var anySubItem = false || options.computerNamePrefix || options.adminUsername || options.adminPassword || options.customData || options.windowsConfiguration || options.linuxConfiguration || options.secrets;
    if (anySubItem) {
      var subItemPath = null;
      if (options.computerNamePrefix) {
        subItemPath = options.path + '/computerNamePrefix';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.adminUsername) {
        subItemPath = options.path + '/adminUsername';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.adminPassword) {
        subItemPath = options.path + '/adminPassword';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.customData) {
        subItemPath = options.path + '/customData';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.windowsConfiguration) {
        subItemPath = options.path + '/windowsConfiguration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.linuxConfiguration) {
        subItemPath = options.path + '/linuxConfiguration';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.secrets) {
        subItemPath = options.path + '/secrets';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set windows-configuration
  var catparametersCreateOrUpdateVirtualMachineScaleSetsWindowsConfiguration0VMPoPwC = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsWindowsConfiguration0VMPoPwC = catparametersCreateOrUpdateVirtualMachineScaleSetsWindowsConfiguration0VMPoPwC.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsWindowsConfiguration0VMPoPwC = parametersCreateOrUpdateVirtualMachineScaleSetsWindowsConfiguration0VMPoPwC.category('windows-configuration')
  .description($('Commands to configure windows-configuration of vmss in config file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsWindowsConfiguration0VMPoPwC.command('set')
  .description($('Set windows-configuration in config string or files, e.g. \r\n         {\r\n           ...\r\n           "windowsConfiguration" : {\r\n             "provisionVMAgent":null,\r\n             "enableAutomaticUpdates":null,\r\n             "timeZone":"",\r\n             "additionalUnattendContent":[\r\n               {\r\n                 "passName":null,\r\n                 "componentName":null,\r\n                 "settingName":null,\r\n                 "content":""\r\n               }\r\n             ],\r\n             "winRM":{\r\n               "listeners":[\r\n                 {\r\n                   "protocol":null,\r\n                   "certificateUrl":""\r\n                 }\r\n               ]\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--provision-vm-agent <provisionVMAgent>', $('Set the provision-vm-agent value.'))
  .option('--enable-automatic-updates <enableAutomaticUpdates>', $('Set the enable-automatic-updates value.'))
  .option('--time-zone <timeZone>', $('Set the time-zone value.'))
  .option('--additional-unattend-content <additionalUnattendContent>', $('Set the additional-unattend-content value.'))
  .option('--win-rm <winRM>', $('Set the win-rm value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/osProfile/windowsConfiguration';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'provisionVMAgent';
    if (options.provisionVMAgent) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.provisionVMAgent);
      cli.output.verbose('================================================');
      if (options.parse && options.provisionVMAgent) {
        options.provisionVMAgent = JSON.parse(options.provisionVMAgent);
      }
      options.provisionVMAgent = JSON.parse(options.provisionVMAgent);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisionVMAgent}]);
    }
    paramPath = options.path + '/' + 'enableAutomaticUpdates';
    if (options.enableAutomaticUpdates) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.enableAutomaticUpdates);
      cli.output.verbose('================================================');
      if (options.parse && options.enableAutomaticUpdates) {
        options.enableAutomaticUpdates = JSON.parse(options.enableAutomaticUpdates);
      }
      options.enableAutomaticUpdates = JSON.parse(options.enableAutomaticUpdates);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.enableAutomaticUpdates}]);
    }
    paramPath = options.path + '/' + 'timeZone';
    if (options.timeZone) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.timeZone);
      cli.output.verbose('================================================');
      if (options.parse && options.timeZone) {
        options.timeZone = JSON.parse(options.timeZone);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.timeZone}]);
    }
    paramPath = options.path + '/' + 'additionalUnattendContent';
    if (options.additionalUnattendContent) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.additionalUnattendContent);
      cli.output.verbose('================================================');
      if (options.parse && options.additionalUnattendContent) {
        options.additionalUnattendContent = JSON.parse(options.additionalUnattendContent);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.additionalUnattendContent}]);
    }
    paramPath = options.path + '/' + 'winRM';
    if (options.winRM) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.winRM);
      cli.output.verbose('================================================');
      if (options.parse && options.winRM) {
        options.winRM = JSON.parse(options.winRM);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.winRM}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete windows-configuration
  var catparametersCreateOrUpdateVirtualMachineScaleSetsWindowsConfiguration1VMPoPwC = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsWindowsConfiguration1VMPoPwC = catparametersCreateOrUpdateVirtualMachineScaleSetsWindowsConfiguration1VMPoPwC.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsWindowsConfiguration1VMPoPwC = parametersCreateOrUpdateVirtualMachineScaleSetsWindowsConfiguration1VMPoPwC.category('windows-configuration')
  .description($('Commands to configure windows-configuration of vmss in config file.'));
  deleteparametersCreateOrUpdateVirtualMachineScaleSetsWindowsConfiguration1VMPoPwC.command('delete')
  .description($('Remove windows-configuration in config string or files, e.g. \r\n         {\r\n           ...\r\n           "windowsConfiguration" : {\r\n             "provisionVMAgent":null,\r\n             "enableAutomaticUpdates":null,\r\n             "timeZone":"",\r\n             "additionalUnattendContent":[\r\n               {\r\n                 "passName":null,\r\n                 "componentName":null,\r\n                 "settingName":null,\r\n                 "content":""\r\n               }\r\n             ],\r\n             "winRM":{\r\n               "listeners":[\r\n                 {\r\n                   "protocol":null,\r\n                   "certificateUrl":""\r\n                 }\r\n               ]\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--provision-vm-agent', $('Remove the provision-vm-agent value.'))
  .option('--enable-automatic-updates', $('Remove the enable-automatic-updates value.'))
  .option('--time-zone', $('Remove the time-zone value.'))
  .option('--additional-unattend-content', $('Remove the additional-unattend-content value.'))
  .option('--win-rm', $('Remove the win-rm value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/osProfile/windowsConfiguration';
    var anySubItem = false || options.provisionVMAgent || options.enableAutomaticUpdates || options.timeZone || options.additionalUnattendContent || options.winRM;
    if (anySubItem) {
      var subItemPath = null;
      if (options.provisionVMAgent) {
        subItemPath = options.path + '/provisionVMAgent';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.enableAutomaticUpdates) {
        subItemPath = options.path + '/enableAutomaticUpdates';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.timeZone) {
        subItemPath = options.path + '/timeZone';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.additionalUnattendContent) {
        subItemPath = options.path + '/additionalUnattendContent';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.winRM) {
        subItemPath = options.path + '/winRM';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set additional-unattend-content
  var catparametersCreateOrUpdateVirtualMachineScaleSetsAdditionalUnattendContent0VMPoPwCaUC = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsAdditionalUnattendContent0VMPoPwCaUC = catparametersCreateOrUpdateVirtualMachineScaleSetsAdditionalUnattendContent0VMPoPwCaUC.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsAdditionalUnattendContent0VMPoPwCaUC = parametersCreateOrUpdateVirtualMachineScaleSetsAdditionalUnattendContent0VMPoPwCaUC.category('additional-unattend-content')
  .description($('Commands to configure additional-unattend-content of vmss in config file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsAdditionalUnattendContent0VMPoPwCaUC.command('set')
  .description($('Set additional-unattend-content in config string or files, e.g. \r\n         {\r\n           ...\r\n           "additionalUnattendContent" : {\r\n             "passName":null,\r\n             "componentName":null,\r\n             "settingName":null,\r\n             "content":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--pass-name <passName>', $('Set the pass-name value.'))
  .option('--component-name <componentName>', $('Set the component-name value.'))
  .option('--setting-name <settingName>', $('Set the setting-name value.'))
  .option('--content <content>', $('Set the content value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/osProfile/windowsConfiguration/additionalUnattendContent' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'passName';
    if (options.passName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.passName);
      cli.output.verbose('================================================');
      if (options.parse && options.passName) {
        options.passName = JSON.parse(options.passName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.passName}]);
    }
    paramPath = options.path + '/' + 'componentName';
    if (options.componentName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.componentName);
      cli.output.verbose('================================================');
      if (options.parse && options.componentName) {
        options.componentName = JSON.parse(options.componentName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.componentName}]);
    }
    paramPath = options.path + '/' + 'settingName';
    if (options.settingName) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.settingName);
      cli.output.verbose('================================================');
      if (options.parse && options.settingName) {
        options.settingName = JSON.parse(options.settingName);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.settingName}]);
    }
    paramPath = options.path + '/' + 'content';
    if (options.content) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.content);
      cli.output.verbose('================================================');
      if (options.parse && options.content) {
        options.content = JSON.parse(options.content);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.content}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete additional-unattend-content
  var catparametersCreateOrUpdateVirtualMachineScaleSetsAdditionalUnattendContent1VMPoPwCaUC = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsAdditionalUnattendContent1VMPoPwCaUC = catparametersCreateOrUpdateVirtualMachineScaleSetsAdditionalUnattendContent1VMPoPwCaUC.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsAdditionalUnattendContent1VMPoPwCaUC = parametersCreateOrUpdateVirtualMachineScaleSetsAdditionalUnattendContent1VMPoPwCaUC.category('additional-unattend-content')
  .description($('Commands to configure additional-unattend-content of vmss in config file.'));
  deleteparametersCreateOrUpdateVirtualMachineScaleSetsAdditionalUnattendContent1VMPoPwCaUC.command('delete')
  .description($('Remove additional-unattend-content in config string or files, e.g. \r\n         {\r\n           ...\r\n           "additionalUnattendContent" : {\r\n             "passName":null,\r\n             "componentName":null,\r\n             "settingName":null,\r\n             "content":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--pass-name', $('Remove the pass-name value.'))
  .option('--component-name', $('Remove the component-name value.'))
  .option('--setting-name', $('Remove the setting-name value.'))
  .option('--content', $('Remove the content value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/osProfile/windowsConfiguration/additionalUnattendContent' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.passName || options.componentName || options.settingName || options.content;
    if (anySubItem) {
      var subItemPath = null;
      if (options.passName) {
        subItemPath = options.path + '/passName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.componentName) {
        subItemPath = options.path + '/componentName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.settingName) {
        subItemPath = options.path + '/settingName';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.content) {
        subItemPath = options.path + '/content';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set win-rm
  var catparametersCreateOrUpdateVirtualMachineScaleSetsWinRM0VMPoPwCwRM = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsWinRM0VMPoPwCwRM = catparametersCreateOrUpdateVirtualMachineScaleSetsWinRM0VMPoPwCwRM.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsWinRM0VMPoPwCwRM = parametersCreateOrUpdateVirtualMachineScaleSetsWinRM0VMPoPwCwRM.category('win-rm')
  .description($('Commands to configure win-rm of vmss in config file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsWinRM0VMPoPwCwRM.command('set')
  .description($('Set win-rm in config string or files, e.g. \r\n         {\r\n           ...\r\n           "winRM" : {\r\n             "listeners":[\r\n               {\r\n                 "protocol":null,\r\n                 "certificateUrl":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--listeners <listeners>', $('Set the listeners value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/osProfile/windowsConfiguration/winRM';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'listeners';
    if (options.listeners) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.listeners);
      cli.output.verbose('================================================');
      if (options.parse && options.listeners) {
        options.listeners = JSON.parse(options.listeners);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.listeners}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete win-rm
  var catparametersCreateOrUpdateVirtualMachineScaleSetsWinRM1VMPoPwCwRM = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsWinRM1VMPoPwCwRM = catparametersCreateOrUpdateVirtualMachineScaleSetsWinRM1VMPoPwCwRM.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsWinRM1VMPoPwCwRM = parametersCreateOrUpdateVirtualMachineScaleSetsWinRM1VMPoPwCwRM.category('win-rm')
  .description($('Commands to configure win-rm of vmss in config file.'));
  deleteparametersCreateOrUpdateVirtualMachineScaleSetsWinRM1VMPoPwCwRM.command('delete')
  .description($('Remove win-rm in config string or files, e.g. \r\n         {\r\n           ...\r\n           "winRM" : {\r\n             "listeners":[\r\n               {\r\n                 "protocol":null,\r\n                 "certificateUrl":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--listeners', $('Remove the listeners value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/osProfile/windowsConfiguration/winRM';
    var anySubItem = false || options.listeners;
    if (anySubItem) {
      var subItemPath = null;
      if (options.listeners) {
        subItemPath = options.path + '/listeners';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set listeners
  var catparametersCreateOrUpdateVirtualMachineScaleSetsListeners0VMPoPwCwRMl = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsListeners0VMPoPwCwRMl = catparametersCreateOrUpdateVirtualMachineScaleSetsListeners0VMPoPwCwRMl.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsListeners0VMPoPwCwRMl = parametersCreateOrUpdateVirtualMachineScaleSetsListeners0VMPoPwCwRMl.category('listeners')
  .description($('Commands to configure listeners of vmss in config file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsListeners0VMPoPwCwRMl.command('set')
  .description($('Set listeners in config string or files, e.g. \r\n         {\r\n           ...\r\n           "listeners" : {\r\n             "protocol":null,\r\n             "certificateUrl":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--protocol <protocol>', $('Set the protocol value.'))
  .option('--certificate-url <certificateUrl>', $('Set the certificate-url value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/osProfile/windowsConfiguration/winRM/listeners' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'protocol';
    if (options.protocol) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.protocol);
      cli.output.verbose('================================================');
      if (options.parse && options.protocol) {
        options.protocol = JSON.parse(options.protocol);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protocol}]);
    }
    paramPath = options.path + '/' + 'certificateUrl';
    if (options.certificateUrl) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.certificateUrl);
      cli.output.verbose('================================================');
      if (options.parse && options.certificateUrl) {
        options.certificateUrl = JSON.parse(options.certificateUrl);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificateUrl}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete listeners
  var catparametersCreateOrUpdateVirtualMachineScaleSetsListeners1VMPoPwCwRMl = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsListeners1VMPoPwCwRMl = catparametersCreateOrUpdateVirtualMachineScaleSetsListeners1VMPoPwCwRMl.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsListeners1VMPoPwCwRMl = parametersCreateOrUpdateVirtualMachineScaleSetsListeners1VMPoPwCwRMl.category('listeners')
  .description($('Commands to configure listeners of vmss in config file.'));
  deleteparametersCreateOrUpdateVirtualMachineScaleSetsListeners1VMPoPwCwRMl.command('delete')
  .description($('Remove listeners in config string or files, e.g. \r\n         {\r\n           ...\r\n           "listeners" : {\r\n             "protocol":null,\r\n             "certificateUrl":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--protocol', $('Remove the protocol value.'))
  .option('--certificate-url', $('Remove the certificate-url value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/osProfile/windowsConfiguration/winRM/listeners' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.protocol || options.certificateUrl;
    if (anySubItem) {
      var subItemPath = null;
      if (options.protocol) {
        subItemPath = options.path + '/protocol';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.certificateUrl) {
        subItemPath = options.path + '/certificateUrl';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set linux-configuration
  var catparametersCreateOrUpdateVirtualMachineScaleSetsLinuxConfiguration0VMPoPlC = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsLinuxConfiguration0VMPoPlC = catparametersCreateOrUpdateVirtualMachineScaleSetsLinuxConfiguration0VMPoPlC.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsLinuxConfiguration0VMPoPlC = parametersCreateOrUpdateVirtualMachineScaleSetsLinuxConfiguration0VMPoPlC.category('linux-configuration')
  .description($('Commands to configure linux-configuration of vmss in config file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsLinuxConfiguration0VMPoPlC.command('set')
  .description($('Set linux-configuration in config string or files, e.g. \r\n         {\r\n           ...\r\n           "linuxConfiguration" : {\r\n             "disablePasswordAuthentication":null,\r\n             "ssh":{\r\n               "publicKeys":[\r\n                 {\r\n                   "path":"",\r\n                   "keyData":""\r\n                 }\r\n               ]\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--disable-password-authentication <disablePasswordAuthentication>', $('Set the disable-password-authentication value.'))
  .option('--ssh <ssh>', $('Set the ssh value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/osProfile/linuxConfiguration';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'disablePasswordAuthentication';
    if (options.disablePasswordAuthentication) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.disablePasswordAuthentication);
      cli.output.verbose('================================================');
      if (options.parse && options.disablePasswordAuthentication) {
        options.disablePasswordAuthentication = JSON.parse(options.disablePasswordAuthentication);
      }
      options.disablePasswordAuthentication = JSON.parse(options.disablePasswordAuthentication);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.disablePasswordAuthentication}]);
    }
    paramPath = options.path + '/' + 'ssh';
    if (options.ssh) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.ssh);
      cli.output.verbose('================================================');
      if (options.parse && options.ssh) {
        options.ssh = JSON.parse(options.ssh);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ssh}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete linux-configuration
  var catparametersCreateOrUpdateVirtualMachineScaleSetsLinuxConfiguration1VMPoPlC = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsLinuxConfiguration1VMPoPlC = catparametersCreateOrUpdateVirtualMachineScaleSetsLinuxConfiguration1VMPoPlC.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsLinuxConfiguration1VMPoPlC = parametersCreateOrUpdateVirtualMachineScaleSetsLinuxConfiguration1VMPoPlC.category('linux-configuration')
  .description($('Commands to configure linux-configuration of vmss in config file.'));
  deleteparametersCreateOrUpdateVirtualMachineScaleSetsLinuxConfiguration1VMPoPlC.command('delete')
  .description($('Remove linux-configuration in config string or files, e.g. \r\n         {\r\n           ...\r\n           "linuxConfiguration" : {\r\n             "disablePasswordAuthentication":null,\r\n             "ssh":{\r\n               "publicKeys":[\r\n                 {\r\n                   "path":"",\r\n                   "keyData":""\r\n                 }\r\n               ]\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--disable-password-authentication', $('Remove the disable-password-authentication value.'))
  .option('--ssh', $('Remove the ssh value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/osProfile/linuxConfiguration';
    var anySubItem = false || options.disablePasswordAuthentication || options.ssh;
    if (anySubItem) {
      var subItemPath = null;
      if (options.disablePasswordAuthentication) {
        subItemPath = options.path + '/disablePasswordAuthentication';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ssh) {
        subItemPath = options.path + '/ssh';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set ssh
  var catparametersCreateOrUpdateVirtualMachineScaleSetsSsh0VMPoPlCs = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsSsh0VMPoPlCs = catparametersCreateOrUpdateVirtualMachineScaleSetsSsh0VMPoPlCs.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsSsh0VMPoPlCs = parametersCreateOrUpdateVirtualMachineScaleSetsSsh0VMPoPlCs.category('ssh')
  .description($('Commands to configure ssh of vmss in config file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsSsh0VMPoPlCs.command('set')
  .description($('Set ssh in config string or files, e.g. \r\n         {\r\n           ...\r\n           "ssh" : {\r\n             "publicKeys":[\r\n               {\r\n                 "path":"",\r\n                 "keyData":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--public-keys <publicKeys>', $('Set the public-keys value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/osProfile/linuxConfiguration/ssh';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'publicKeys';
    if (options.publicKeys) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.publicKeys);
      cli.output.verbose('================================================');
      if (options.parse && options.publicKeys) {
        options.publicKeys = JSON.parse(options.publicKeys);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publicKeys}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete ssh
  var catparametersCreateOrUpdateVirtualMachineScaleSetsSsh1VMPoPlCs = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsSsh1VMPoPlCs = catparametersCreateOrUpdateVirtualMachineScaleSetsSsh1VMPoPlCs.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsSsh1VMPoPlCs = parametersCreateOrUpdateVirtualMachineScaleSetsSsh1VMPoPlCs.category('ssh')
  .description($('Commands to configure ssh of vmss in config file.'));
  deleteparametersCreateOrUpdateVirtualMachineScaleSetsSsh1VMPoPlCs.command('delete')
  .description($('Remove ssh in config string or files, e.g. \r\n         {\r\n           ...\r\n           "ssh" : {\r\n             "publicKeys":[\r\n               {\r\n                 "path":"",\r\n                 "keyData":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--public-keys', $('Remove the public-keys value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/osProfile/linuxConfiguration/ssh';
    var anySubItem = false || options.publicKeys;
    if (anySubItem) {
      var subItemPath = null;
      if (options.publicKeys) {
        subItemPath = options.path + '/publicKeys';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set public-keys
  var catparametersCreateOrUpdateVirtualMachineScaleSetsPublicKeys0VMPoPlCspK = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsPublicKeys0VMPoPlCspK = catparametersCreateOrUpdateVirtualMachineScaleSetsPublicKeys0VMPoPlCspK.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsPublicKeys0VMPoPlCspK = parametersCreateOrUpdateVirtualMachineScaleSetsPublicKeys0VMPoPlCspK.category('public-keys')
  .description($('Commands to configure public-keys of vmss in config file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsPublicKeys0VMPoPlCspK.command('set')
  .description($('Set public-keys in config string or files, e.g. \r\n         {\r\n           ...\r\n           "publicKeys" : {\r\n             "path":"",\r\n             "keyData":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--path <path>', $('Set the path value.'))
  .option('--key-data <keyData>', $('Set the key-data value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/osProfile/linuxConfiguration/ssh/publicKeys' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'path';
    if (options.path) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.path);
      cli.output.verbose('================================================');
      if (options.parse && options.path) {
        options.path = JSON.parse(options.path);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.path}]);
    }
    paramPath = options.path + '/' + 'keyData';
    if (options.keyData) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.keyData);
      cli.output.verbose('================================================');
      if (options.parse && options.keyData) {
        options.keyData = JSON.parse(options.keyData);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.keyData}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete public-keys
  var catparametersCreateOrUpdateVirtualMachineScaleSetsPublicKeys1VMPoPlCspK = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsPublicKeys1VMPoPlCspK = catparametersCreateOrUpdateVirtualMachineScaleSetsPublicKeys1VMPoPlCspK.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsPublicKeys1VMPoPlCspK = parametersCreateOrUpdateVirtualMachineScaleSetsPublicKeys1VMPoPlCspK.category('public-keys')
  .description($('Commands to configure public-keys of vmss in config file.'));
  deleteparametersCreateOrUpdateVirtualMachineScaleSetsPublicKeys1VMPoPlCspK.command('delete')
  .description($('Remove public-keys in config string or files, e.g. \r\n         {\r\n           ...\r\n           "publicKeys" : {\r\n             "path":"",\r\n             "keyData":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--path', $('Remove the path value.'))
  .option('--key-data', $('Remove the key-data value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/osProfile/linuxConfiguration/ssh/publicKeys' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.path || options.keyData;
    if (anySubItem) {
      var subItemPath = null;
      if (options.path) {
        subItemPath = options.path + '/path';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.keyData) {
        subItemPath = options.path + '/keyData';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set secrets
  var catparametersCreateOrUpdateVirtualMachineScaleSetsSecrets0VMPoPs = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsSecrets0VMPoPs = catparametersCreateOrUpdateVirtualMachineScaleSetsSecrets0VMPoPs.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsSecrets0VMPoPs = parametersCreateOrUpdateVirtualMachineScaleSetsSecrets0VMPoPs.category('secrets')
  .description($('Commands to configure secrets of vmss in config file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsSecrets0VMPoPs.command('set')
  .description($('Set secrets in config string or files, e.g. \r\n         {\r\n           ...\r\n           "secrets" : {\r\n             "sourceVault":{\r\n               "id":""\r\n             },\r\n             "vaultCertificates":[\r\n               {\r\n                 "certificateUrl":"",\r\n                 "certificateStore":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--source-vault <sourceVault>', $('Set the source-vault value.'))
  .option('--vault-certificates <vaultCertificates>', $('Set the vault-certificates value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/osProfile/secrets' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'sourceVault';
    if (options.sourceVault) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.sourceVault);
      cli.output.verbose('================================================');
      if (options.parse && options.sourceVault) {
        options.sourceVault = JSON.parse(options.sourceVault);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sourceVault}]);
    }
    paramPath = options.path + '/' + 'vaultCertificates';
    if (options.vaultCertificates) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.vaultCertificates);
      cli.output.verbose('================================================');
      if (options.parse && options.vaultCertificates) {
        options.vaultCertificates = JSON.parse(options.vaultCertificates);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vaultCertificates}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete secrets
  var catparametersCreateOrUpdateVirtualMachineScaleSetsSecrets1VMPoPs = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsSecrets1VMPoPs = catparametersCreateOrUpdateVirtualMachineScaleSetsSecrets1VMPoPs.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsSecrets1VMPoPs = parametersCreateOrUpdateVirtualMachineScaleSetsSecrets1VMPoPs.category('secrets')
  .description($('Commands to configure secrets of vmss in config file.'));
  deleteparametersCreateOrUpdateVirtualMachineScaleSetsSecrets1VMPoPs.command('delete')
  .description($('Remove secrets in config string or files, e.g. \r\n         {\r\n           ...\r\n           "secrets" : {\r\n             "sourceVault":{\r\n               "id":""\r\n             },\r\n             "vaultCertificates":[\r\n               {\r\n                 "certificateUrl":"",\r\n                 "certificateStore":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--source-vault', $('Remove the source-vault value.'))
  .option('--vault-certificates', $('Remove the vault-certificates value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/osProfile/secrets' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.sourceVault || options.vaultCertificates;
    if (anySubItem) {
      var subItemPath = null;
      if (options.sourceVault) {
        subItemPath = options.path + '/sourceVault';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.vaultCertificates) {
        subItemPath = options.path + '/vaultCertificates';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set source-vault
  var catparametersCreateOrUpdateVirtualMachineScaleSetsSourceVault0VMPoPsIsV = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsSourceVault0VMPoPsIsV = catparametersCreateOrUpdateVirtualMachineScaleSetsSourceVault0VMPoPsIsV.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsSourceVault0VMPoPsIsV = parametersCreateOrUpdateVirtualMachineScaleSetsSourceVault0VMPoPsIsV.category('source-vault')
  .description($('Commands to configure source-vault of vmss in config file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsSourceVault0VMPoPsIsV.command('set')
  .description($('Set source-vault in config string or files, e.g. \r\n         {\r\n           ...\r\n           "sourceVault" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--secrets-index <secrets-index>', $('Indexer: secrets-index.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/osProfile/secrets/' + options.secretsIndex + '/sourceVault';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'id';
    if (options.id) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.id);
      cli.output.verbose('================================================');
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete source-vault
  var catparametersCreateOrUpdateVirtualMachineScaleSetsSourceVault1VMPoPsIsV = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsSourceVault1VMPoPsIsV = catparametersCreateOrUpdateVirtualMachineScaleSetsSourceVault1VMPoPsIsV.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsSourceVault1VMPoPsIsV = parametersCreateOrUpdateVirtualMachineScaleSetsSourceVault1VMPoPsIsV.category('source-vault')
  .description($('Commands to configure source-vault of vmss in config file.'));
  deleteparametersCreateOrUpdateVirtualMachineScaleSetsSourceVault1VMPoPsIsV.command('delete')
  .description($('Remove source-vault in config string or files, e.g. \r\n         {\r\n           ...\r\n           "sourceVault" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--secrets-index <secrets-index>', $('Indexer: secrets-index.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/osProfile/secrets/' + options.secretsIndex + '/sourceVault';
    var anySubItem = false || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set vault-certificates
  var catparametersCreateOrUpdateVirtualMachineScaleSetsVaultCertificates0VMPoPsIvC = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsVaultCertificates0VMPoPsIvC = catparametersCreateOrUpdateVirtualMachineScaleSetsVaultCertificates0VMPoPsIvC.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsVaultCertificates0VMPoPsIvC = parametersCreateOrUpdateVirtualMachineScaleSetsVaultCertificates0VMPoPsIvC.category('vault-certificates')
  .description($('Commands to configure vault-certificates of vmss in config file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsVaultCertificates0VMPoPsIvC.command('set')
  .description($('Set vault-certificates in config string or files, e.g. \r\n         {\r\n           ...\r\n           "vaultCertificates" : {\r\n             "certificateUrl":"",\r\n             "certificateStore":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--secrets-index <secrets-index>', $('Indexer: secrets-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--certificate-url <certificateUrl>', $('Set the certificate-url value.'))
  .option('--certificate-store <certificateStore>', $('Set the certificate-store value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/osProfile/secrets/' + options.secretsIndex + '/vaultCertificates' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'certificateUrl';
    if (options.certificateUrl) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.certificateUrl);
      cli.output.verbose('================================================');
      if (options.parse && options.certificateUrl) {
        options.certificateUrl = JSON.parse(options.certificateUrl);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificateUrl}]);
    }
    paramPath = options.path + '/' + 'certificateStore';
    if (options.certificateStore) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.certificateStore);
      cli.output.verbose('================================================');
      if (options.parse && options.certificateStore) {
        options.certificateStore = JSON.parse(options.certificateStore);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.certificateStore}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete vault-certificates
  var catparametersCreateOrUpdateVirtualMachineScaleSetsVaultCertificates1VMPoPsIvC = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsVaultCertificates1VMPoPsIvC = catparametersCreateOrUpdateVirtualMachineScaleSetsVaultCertificates1VMPoPsIvC.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsVaultCertificates1VMPoPsIvC = parametersCreateOrUpdateVirtualMachineScaleSetsVaultCertificates1VMPoPsIvC.category('vault-certificates')
  .description($('Commands to configure vault-certificates of vmss in config file.'));
  deleteparametersCreateOrUpdateVirtualMachineScaleSetsVaultCertificates1VMPoPsIvC.command('delete')
  .description($('Remove vault-certificates in config string or files, e.g. \r\n         {\r\n           ...\r\n           "vaultCertificates" : {\r\n             "certificateUrl":"",\r\n             "certificateStore":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--secrets-index <secrets-index>', $('Indexer: secrets-index.'))
  .option('--certificate-url', $('Remove the certificate-url value.'))
  .option('--certificate-store', $('Remove the certificate-store value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/osProfile/secrets/' + options.secretsIndex + '/vaultCertificates' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.certificateUrl || options.certificateStore;
    if (anySubItem) {
      var subItemPath = null;
      if (options.certificateUrl) {
        subItemPath = options.path + '/certificateUrl';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.certificateStore) {
        subItemPath = options.path + '/certificateStore';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set storage-profile
  var catparametersCreateOrUpdateVirtualMachineScaleSetsStorageProfile0VMPsP = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsStorageProfile0VMPsP = catparametersCreateOrUpdateVirtualMachineScaleSetsStorageProfile0VMPsP.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsStorageProfile0VMPsP = parametersCreateOrUpdateVirtualMachineScaleSetsStorageProfile0VMPsP.category('storage-profile')
  .description($('Commands to configure storage-profile of vmss in config file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsStorageProfile0VMPsP.command('set')
  .description($('Set storage-profile in config string or files, e.g. \r\n         {\r\n           ...\r\n           "storageProfile" : {\r\n             "imageReference":{\r\n               "publisher":"",\r\n               "offer":"",\r\n               "sku":"",\r\n               "version":"",\r\n               "id":""\r\n             },\r\n             "osDisk":{\r\n               "name":"",\r\n               "caching":null,\r\n               "createOption":"",\r\n               "osType":null,\r\n               "image":{\r\n                 "uri":""\r\n               },\r\n               "vhdContainers":[\r\n                 ""\r\n               ],\r\n               "managedDisk":{\r\n                 "storageAccountType":null\r\n               }\r\n             },\r\n             "dataDisks":[\r\n               {\r\n                 "name":"",\r\n                 "lun":"",\r\n                 "caching":null,\r\n                 "createOption":"",\r\n                 "diskSizeGB":null,\r\n                 "managedDisk":{\r\n                   "storageAccountType":null\r\n                 }\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--image-reference <imageReference>', $('Set the image-reference value.'))
  .option('--os-disk <osDisk>', $('Set the os-disk value.'))
  .option('--data-disks <dataDisks>', $('Set the data-disks value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/storageProfile';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'imageReference';
    if (options.imageReference) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.imageReference);
      cli.output.verbose('================================================');
      if (options.parse && options.imageReference) {
        options.imageReference = JSON.parse(options.imageReference);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.imageReference}]);
    }
    paramPath = options.path + '/' + 'osDisk';
    if (options.osDisk) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.osDisk);
      cli.output.verbose('================================================');
      if (options.parse && options.osDisk) {
        options.osDisk = JSON.parse(options.osDisk);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.osDisk}]);
    }
    paramPath = options.path + '/' + 'dataDisks';
    if (options.dataDisks) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.dataDisks);
      cli.output.verbose('================================================');
      if (options.parse && options.dataDisks) {
        options.dataDisks = JSON.parse(options.dataDisks);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.dataDisks}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete storage-profile
  var catparametersCreateOrUpdateVirtualMachineScaleSetsStorageProfile1VMPsP = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsStorageProfile1VMPsP = catparametersCreateOrUpdateVirtualMachineScaleSetsStorageProfile1VMPsP.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsStorageProfile1VMPsP = parametersCreateOrUpdateVirtualMachineScaleSetsStorageProfile1VMPsP.category('storage-profile')
  .description($('Commands to configure storage-profile of vmss in config file.'));
  deleteparametersCreateOrUpdateVirtualMachineScaleSetsStorageProfile1VMPsP.command('delete')
  .description($('Remove storage-profile in config string or files, e.g. \r\n         {\r\n           ...\r\n           "storageProfile" : {\r\n             "imageReference":{\r\n               "publisher":"",\r\n               "offer":"",\r\n               "sku":"",\r\n               "version":"",\r\n               "id":""\r\n             },\r\n             "osDisk":{\r\n               "name":"",\r\n               "caching":null,\r\n               "createOption":"",\r\n               "osType":null,\r\n               "image":{\r\n                 "uri":""\r\n               },\r\n               "vhdContainers":[\r\n                 ""\r\n               ],\r\n               "managedDisk":{\r\n                 "storageAccountType":null\r\n               }\r\n             },\r\n             "dataDisks":[\r\n               {\r\n                 "name":"",\r\n                 "lun":"",\r\n                 "caching":null,\r\n                 "createOption":"",\r\n                 "diskSizeGB":null,\r\n                 "managedDisk":{\r\n                   "storageAccountType":null\r\n                 }\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--image-reference', $('Remove the image-reference value.'))
  .option('--os-disk', $('Remove the os-disk value.'))
  .option('--data-disks', $('Remove the data-disks value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/storageProfile';
    var anySubItem = false || options.imageReference || options.osDisk || options.dataDisks;
    if (anySubItem) {
      var subItemPath = null;
      if (options.imageReference) {
        subItemPath = options.path + '/imageReference';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.osDisk) {
        subItemPath = options.path + '/osDisk';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.dataDisks) {
        subItemPath = options.path + '/dataDisks';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set image-reference
  var catparametersCreateOrUpdateVirtualMachineScaleSetsImageReference0VMPsPiR = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsImageReference0VMPsPiR = catparametersCreateOrUpdateVirtualMachineScaleSetsImageReference0VMPsPiR.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsImageReference0VMPsPiR = parametersCreateOrUpdateVirtualMachineScaleSetsImageReference0VMPsPiR.category('image-reference')
  .description($('Commands to configure image-reference of vmss in config file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsImageReference0VMPsPiR.command('set')
  .description($('Set image-reference in config string or files, e.g. \r\n         {\r\n           ...\r\n           "imageReference" : {\r\n             "publisher":"",\r\n             "offer":"",\r\n             "sku":"",\r\n             "version":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--publisher <publisher>', $('Set the publisher value.'))
  .option('--offer <offer>', $('Set the offer value.'))
  .option('--sku <sku>', $('Set the sku value.'))
  .option('--version <version>', $('Set the version value.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/storageProfile/imageReference';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'publisher';
    if (options.publisher) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.publisher);
      cli.output.verbose('================================================');
      if (options.parse && options.publisher) {
        options.publisher = JSON.parse(options.publisher);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisher}]);
    }
    paramPath = options.path + '/' + 'offer';
    if (options.offer) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.offer);
      cli.output.verbose('================================================');
      if (options.parse && options.offer) {
        options.offer = JSON.parse(options.offer);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.offer}]);
    }
    paramPath = options.path + '/' + 'sku';
    if (options.sku) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.sku);
      cli.output.verbose('================================================');
      if (options.parse && options.sku) {
        options.sku = JSON.parse(options.sku);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.sku}]);
    }
    paramPath = options.path + '/' + 'version';
    if (options.version) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.version);
      cli.output.verbose('================================================');
      if (options.parse && options.version) {
        options.version = JSON.parse(options.version);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.version}]);
    }
    paramPath = options.path + '/' + 'id';
    if (options.id) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.id);
      cli.output.verbose('================================================');
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete image-reference
  var catparametersCreateOrUpdateVirtualMachineScaleSetsImageReference1VMPsPiR = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsImageReference1VMPsPiR = catparametersCreateOrUpdateVirtualMachineScaleSetsImageReference1VMPsPiR.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsImageReference1VMPsPiR = parametersCreateOrUpdateVirtualMachineScaleSetsImageReference1VMPsPiR.category('image-reference')
  .description($('Commands to configure image-reference of vmss in config file.'));
  deleteparametersCreateOrUpdateVirtualMachineScaleSetsImageReference1VMPsPiR.command('delete')
  .description($('Remove image-reference in config string or files, e.g. \r\n         {\r\n           ...\r\n           "imageReference" : {\r\n             "publisher":"",\r\n             "offer":"",\r\n             "sku":"",\r\n             "version":"",\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--publisher', $('Remove the publisher value.'))
  .option('--offer', $('Remove the offer value.'))
  .option('--sku', $('Remove the sku value.'))
  .option('--version', $('Remove the version value.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/storageProfile/imageReference';
    var anySubItem = false || options.publisher || options.offer || options.sku || options.version || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.publisher) {
        subItemPath = options.path + '/publisher';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.offer) {
        subItemPath = options.path + '/offer';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.sku) {
        subItemPath = options.path + '/sku';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.version) {
        subItemPath = options.path + '/version';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set os-disk
  var catparametersCreateOrUpdateVirtualMachineScaleSetsOsDisk0VMPsPoD = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsOsDisk0VMPsPoD = catparametersCreateOrUpdateVirtualMachineScaleSetsOsDisk0VMPsPoD.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsOsDisk0VMPsPoD = parametersCreateOrUpdateVirtualMachineScaleSetsOsDisk0VMPsPoD.category('os-disk')
  .description($('Commands to configure os-disk of vmss in config file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsOsDisk0VMPsPoD.command('set')
  .description($('Set os-disk in config string or files, e.g. \r\n         {\r\n           ...\r\n           "osDisk" : {\r\n             "name":"",\r\n             "caching":null,\r\n             "createOption":"",\r\n             "osType":null,\r\n             "image":{\r\n               "uri":""\r\n             },\r\n             "vhdContainers":[\r\n               ""\r\n             ],\r\n             "managedDisk":{\r\n               "storageAccountType":null\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--name <name>', $('Set the name value.'))
  .option('--caching <caching>', $('Set the caching value.'))
  .option('--create-option <createOption>', $('Set the create-option value.'))
  .option('--os-type <osType>', $('Set the os-type value.'))
  .option('--image <image>', $('Set the image value.'))
  .option('--vhd-containers <vhdContainers>', $('Set the vhd-containers value.'))
  .option('--managed-disk <managedDisk>', $('Set the managed-disk value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/storageProfile/osDisk';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'caching';
    if (options.caching) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.caching);
      cli.output.verbose('================================================');
      if (options.parse && options.caching) {
        options.caching = JSON.parse(options.caching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.caching}]);
    }
    paramPath = options.path + '/' + 'createOption';
    if (options.createOption) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.createOption);
      cli.output.verbose('================================================');
      if (options.parse && options.createOption) {
        options.createOption = JSON.parse(options.createOption);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.createOption}]);
    }
    paramPath = options.path + '/' + 'osType';
    if (options.osType) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.osType);
      cli.output.verbose('================================================');
      if (options.parse && options.osType) {
        options.osType = JSON.parse(options.osType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.osType}]);
    }
    paramPath = options.path + '/' + 'image';
    if (options.image) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.image);
      cli.output.verbose('================================================');
      if (options.parse && options.image) {
        options.image = JSON.parse(options.image);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.image}]);
    }
    paramPath = options.path + '/' + 'vhdContainers';
    if (options.vhdContainers) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.vhdContainers);
      cli.output.verbose('================================================');
      if (options.parse && options.vhdContainers) {
        options.vhdContainers = JSON.parse(options.vhdContainers);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.vhdContainers}]);
    }
    paramPath = options.path + '/' + 'managedDisk';
    if (options.managedDisk) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.managedDisk);
      cli.output.verbose('================================================');
      if (options.parse && options.managedDisk) {
        options.managedDisk = JSON.parse(options.managedDisk);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.managedDisk}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete os-disk
  var catparametersCreateOrUpdateVirtualMachineScaleSetsOsDisk1VMPsPoD = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsOsDisk1VMPsPoD = catparametersCreateOrUpdateVirtualMachineScaleSetsOsDisk1VMPsPoD.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsOsDisk1VMPsPoD = parametersCreateOrUpdateVirtualMachineScaleSetsOsDisk1VMPsPoD.category('os-disk')
  .description($('Commands to configure os-disk of vmss in config file.'));
  deleteparametersCreateOrUpdateVirtualMachineScaleSetsOsDisk1VMPsPoD.command('delete')
  .description($('Remove os-disk in config string or files, e.g. \r\n         {\r\n           ...\r\n           "osDisk" : {\r\n             "name":"",\r\n             "caching":null,\r\n             "createOption":"",\r\n             "osType":null,\r\n             "image":{\r\n               "uri":""\r\n             },\r\n             "vhdContainers":[\r\n               ""\r\n             ],\r\n             "managedDisk":{\r\n               "storageAccountType":null\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--name', $('Remove the name value.'))
  .option('--caching', $('Remove the caching value.'))
  .option('--create-option', $('Remove the create-option value.'))
  .option('--os-type', $('Remove the os-type value.'))
  .option('--image', $('Remove the image value.'))
  .option('--vhd-containers', $('Remove the vhd-containers value.'))
  .option('--managed-disk', $('Remove the managed-disk value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/storageProfile/osDisk';
    var anySubItem = false || options.name || options.caching || options.createOption || options.osType || options.image || options.vhdContainers || options.managedDisk;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.caching) {
        subItemPath = options.path + '/caching';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.createOption) {
        subItemPath = options.path + '/createOption';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.osType) {
        subItemPath = options.path + '/osType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.image) {
        subItemPath = options.path + '/image';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.vhdContainers) {
        subItemPath = options.path + '/vhdContainers';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.managedDisk) {
        subItemPath = options.path + '/managedDisk';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set image
  var catparametersCreateOrUpdateVirtualMachineScaleSetsImage0VMPsPoDi = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsImage0VMPsPoDi = catparametersCreateOrUpdateVirtualMachineScaleSetsImage0VMPsPoDi.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsImage0VMPsPoDi = parametersCreateOrUpdateVirtualMachineScaleSetsImage0VMPsPoDi.category('image')
  .description($('Commands to configure image of vmss in config file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsImage0VMPsPoDi.command('set')
  .description($('Set image in config string or files, e.g. \r\n         {\r\n           ...\r\n           "image" : {\r\n             "uri":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--uri <uri>', $('Set the uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/storageProfile/osDisk/image';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'uri';
    if (options.uri) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.uri);
      cli.output.verbose('================================================');
      if (options.parse && options.uri) {
        options.uri = JSON.parse(options.uri);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.uri}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete image
  var catparametersCreateOrUpdateVirtualMachineScaleSetsImage1VMPsPoDi = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsImage1VMPsPoDi = catparametersCreateOrUpdateVirtualMachineScaleSetsImage1VMPsPoDi.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsImage1VMPsPoDi = parametersCreateOrUpdateVirtualMachineScaleSetsImage1VMPsPoDi.category('image')
  .description($('Commands to configure image of vmss in config file.'));
  deleteparametersCreateOrUpdateVirtualMachineScaleSetsImage1VMPsPoDi.command('delete')
  .description($('Remove image in config string or files, e.g. \r\n         {\r\n           ...\r\n           "image" : {\r\n             "uri":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--uri', $('Remove the uri value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/storageProfile/osDisk/image';
    var anySubItem = false || options.uri;
    if (anySubItem) {
      var subItemPath = null;
      if (options.uri) {
        subItemPath = options.path + '/uri';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set vhd-containers
  var catparametersCreateOrUpdateVirtualMachineScaleSetsVhdContainers0VMPsPoDvC = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsVhdContainers0VMPsPoDvC = catparametersCreateOrUpdateVirtualMachineScaleSetsVhdContainers0VMPsPoDvC.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsVhdContainers0VMPsPoDvC = parametersCreateOrUpdateVirtualMachineScaleSetsVhdContainers0VMPsPoDvC.category('vhd-containers')
  .description($('Commands to configure vhd-containers of vmss in config file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsVhdContainers0VMPsPoDvC.command('set')
  .description($('Set vhd-containers in config string or files, e.g. \r\n         {\r\n           ...\r\n           "vhdContainers" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/storageProfile/osDisk/vhdContainers' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete vhd-containers
  var catparametersCreateOrUpdateVirtualMachineScaleSetsVhdContainers1VMPsPoDvC = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsVhdContainers1VMPsPoDvC = catparametersCreateOrUpdateVirtualMachineScaleSetsVhdContainers1VMPsPoDvC.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsVhdContainers1VMPsPoDvC = parametersCreateOrUpdateVirtualMachineScaleSetsVhdContainers1VMPsPoDvC.category('vhd-containers')
  .description($('Commands to configure vhd-containers of vmss in config file.'));
  deleteparametersCreateOrUpdateVirtualMachineScaleSetsVhdContainers1VMPsPoDvC.command('delete')
  .description($('Remove vhd-containers in config string or files, e.g. \r\n         {\r\n           ...\r\n           "vhdContainers" : ""\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/storageProfile/osDisk/vhdContainers' + (options.index ? ('/' + options.index) : '');
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set managed-disk
  var catparametersCreateOrUpdateVirtualMachineScaleSetsManagedDisk0VMPsPoDmD = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsManagedDisk0VMPsPoDmD = catparametersCreateOrUpdateVirtualMachineScaleSetsManagedDisk0VMPsPoDmD.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsManagedDisk0VMPsPoDmD = parametersCreateOrUpdateVirtualMachineScaleSetsManagedDisk0VMPsPoDmD.category('managed-disk')
  .description($('Commands to configure managed-disk of vmss in config file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsManagedDisk0VMPsPoDmD.command('set')
  .description($('Set managed-disk in config string or files, e.g. \r\n         {\r\n           ...\r\n           "managedDisk" : {\r\n             "storageAccountType":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--storage-account-type <storageAccountType>', $('Set the storage-account-type value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/storageProfile/osDisk/managedDisk';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'storageAccountType';
    if (options.storageAccountType) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.storageAccountType);
      cli.output.verbose('================================================');
      if (options.parse && options.storageAccountType) {
        options.storageAccountType = JSON.parse(options.storageAccountType);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.storageAccountType}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete managed-disk
  var catparametersCreateOrUpdateVirtualMachineScaleSetsManagedDisk1VMPsPoDmD = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsManagedDisk1VMPsPoDmD = catparametersCreateOrUpdateVirtualMachineScaleSetsManagedDisk1VMPsPoDmD.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsManagedDisk1VMPsPoDmD = parametersCreateOrUpdateVirtualMachineScaleSetsManagedDisk1VMPsPoDmD.category('managed-disk')
  .description($('Commands to configure managed-disk of vmss in config file.'));
  deleteparametersCreateOrUpdateVirtualMachineScaleSetsManagedDisk1VMPsPoDmD.command('delete')
  .description($('Remove managed-disk in config string or files, e.g. \r\n         {\r\n           ...\r\n           "managedDisk" : {\r\n             "storageAccountType":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--storage-account-type', $('Remove the storage-account-type value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/storageProfile/osDisk/managedDisk';
    var anySubItem = false || options.storageAccountType;
    if (anySubItem) {
      var subItemPath = null;
      if (options.storageAccountType) {
        subItemPath = options.path + '/storageAccountType';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set data-disks
  var catparametersCreateOrUpdateVirtualMachineScaleSetsDataDisks0VMPsPdD = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsDataDisks0VMPsPdD = catparametersCreateOrUpdateVirtualMachineScaleSetsDataDisks0VMPsPdD.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsDataDisks0VMPsPdD = parametersCreateOrUpdateVirtualMachineScaleSetsDataDisks0VMPsPdD.category('data-disks')
  .description($('Commands to configure data-disks of vmss in config file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsDataDisks0VMPsPdD.command('set')
  .description($('Set data-disks in config string or files, e.g. \r\n         {\r\n           ...\r\n           "dataDisks" : {\r\n             "name":"",\r\n             "lun":"",\r\n             "caching":null,\r\n             "createOption":"",\r\n             "diskSizeGB":null,\r\n             "managedDisk":{\r\n               "storageAccountType":null\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--name <name>', $('Set the name value.'))
  .option('--lun <lun>', $('Set the lun value.'))
  .option('--caching <caching>', $('Set the caching value.'))
  .option('--create-option <createOption>', $('Set the create-option value.'))
  .option('--disk-size-g-b <diskSizeGB>', $('Set the disk-size-g-b value.'))
  .option('--managed-disk <managedDisk>', $('Set the managed-disk value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/storageProfile/dataDisks' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'lun';
    if (options.lun) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.lun);
      cli.output.verbose('================================================');
      if (options.parse && options.lun) {
        options.lun = JSON.parse(options.lun);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.lun}]);
    }
    paramPath = options.path + '/' + 'caching';
    if (options.caching) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.caching);
      cli.output.verbose('================================================');
      if (options.parse && options.caching) {
        options.caching = JSON.parse(options.caching);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.caching}]);
    }
    paramPath = options.path + '/' + 'createOption';
    if (options.createOption) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.createOption);
      cli.output.verbose('================================================');
      if (options.parse && options.createOption) {
        options.createOption = JSON.parse(options.createOption);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.createOption}]);
    }
    paramPath = options.path + '/' + 'diskSizeGB';
    if (options.diskSizeGB) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.diskSizeGB);
      cli.output.verbose('================================================');
      if (options.parse && options.diskSizeGB) {
        options.diskSizeGB = JSON.parse(options.diskSizeGB);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.diskSizeGB}]);
    }
    paramPath = options.path + '/' + 'managedDisk';
    if (options.managedDisk) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.managedDisk);
      cli.output.verbose('================================================');
      if (options.parse && options.managedDisk) {
        options.managedDisk = JSON.parse(options.managedDisk);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.managedDisk}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete data-disks
  var catparametersCreateOrUpdateVirtualMachineScaleSetsDataDisks1VMPsPdD = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsDataDisks1VMPsPdD = catparametersCreateOrUpdateVirtualMachineScaleSetsDataDisks1VMPsPdD.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsDataDisks1VMPsPdD = parametersCreateOrUpdateVirtualMachineScaleSetsDataDisks1VMPsPdD.category('data-disks')
  .description($('Commands to configure data-disks of vmss in config file.'));
  deleteparametersCreateOrUpdateVirtualMachineScaleSetsDataDisks1VMPsPdD.command('delete')
  .description($('Remove data-disks in config string or files, e.g. \r\n         {\r\n           ...\r\n           "dataDisks" : {\r\n             "name":"",\r\n             "lun":"",\r\n             "caching":null,\r\n             "createOption":"",\r\n             "diskSizeGB":null,\r\n             "managedDisk":{\r\n               "storageAccountType":null\r\n             }\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--name', $('Remove the name value.'))
  .option('--lun', $('Remove the lun value.'))
  .option('--caching', $('Remove the caching value.'))
  .option('--create-option', $('Remove the create-option value.'))
  .option('--disk-size-g-b', $('Remove the disk-size-g-b value.'))
  .option('--managed-disk', $('Remove the managed-disk value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/storageProfile/dataDisks' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.lun || options.caching || options.createOption || options.diskSizeGB || options.managedDisk;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.lun) {
        subItemPath = options.path + '/lun';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.caching) {
        subItemPath = options.path + '/caching';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.createOption) {
        subItemPath = options.path + '/createOption';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.diskSizeGB) {
        subItemPath = options.path + '/diskSizeGB';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.managedDisk) {
        subItemPath = options.path + '/managedDisk';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config delete managed-disk
  var catparametersCreateOrUpdateVirtualMachineScaleSetsManagedDisk1VMPsPdDDImD1 = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsManagedDisk1VMPsPdDDImD1 = catparametersCreateOrUpdateVirtualMachineScaleSetsManagedDisk1VMPsPdDDImD1.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsManagedDisk1VMPsPdDDImD1 = parametersCreateOrUpdateVirtualMachineScaleSetsManagedDisk1VMPsPdDDImD1.category('managed-disk')
  .description($('Commands to configure managed-disk of vmss in config file.'));
  deleteparametersCreateOrUpdateVirtualMachineScaleSetsManagedDisk1VMPsPdDDImD1.command('delete')
  .description($('Remove managed-disk in config string or files, e.g. \r\n         {\r\n           ...\r\n           "managedDisk" : {\r\n             "storageAccountType":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--data-disks-index <data-disks-index>', $('Indexer: data-disks-index.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/storageProfile/dataDisks/' + options.dataDisksIndex + '/managedDisk';
    jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set network-profile
  var catparametersCreateOrUpdateVirtualMachineScaleSetsNetworkProfile0VMPnP = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsNetworkProfile0VMPnP = catparametersCreateOrUpdateVirtualMachineScaleSetsNetworkProfile0VMPnP.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsNetworkProfile0VMPnP = parametersCreateOrUpdateVirtualMachineScaleSetsNetworkProfile0VMPnP.category('network-profile')
  .description($('Commands to configure network-profile of vmss in config file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsNetworkProfile0VMPnP.command('set')
  .description($('Set network-profile in config string or files, e.g. \r\n         {\r\n           ...\r\n           "networkProfile" : {\r\n             "networkInterfaceConfigurations":[\r\n               {\r\n                 "name":"",\r\n                 "primary":null,\r\n                 "ipConfigurations":[\r\n                   {\r\n                     "name":"",\r\n                     "subnet":{\r\n                       "id":""\r\n                     },\r\n                     "applicationGatewayBackendAddressPools":[\r\n                       {\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "loadBalancerBackendAddressPools":[\r\n                       {\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "loadBalancerInboundNatPools":[\r\n                       {\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "id":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--network-interface-configurations <networkInterfaceConfigurations>', $('Set the network-interface-configurations value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/networkProfile';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'networkInterfaceConfigurations';
    if (options.networkInterfaceConfigurations) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.networkInterfaceConfigurations);
      cli.output.verbose('================================================');
      if (options.parse && options.networkInterfaceConfigurations) {
        options.networkInterfaceConfigurations = JSON.parse(options.networkInterfaceConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.networkInterfaceConfigurations}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete network-profile
  var catparametersCreateOrUpdateVirtualMachineScaleSetsNetworkProfile1VMPnP = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsNetworkProfile1VMPnP = catparametersCreateOrUpdateVirtualMachineScaleSetsNetworkProfile1VMPnP.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsNetworkProfile1VMPnP = parametersCreateOrUpdateVirtualMachineScaleSetsNetworkProfile1VMPnP.category('network-profile')
  .description($('Commands to configure network-profile of vmss in config file.'));
  deleteparametersCreateOrUpdateVirtualMachineScaleSetsNetworkProfile1VMPnP.command('delete')
  .description($('Remove network-profile in config string or files, e.g. \r\n         {\r\n           ...\r\n           "networkProfile" : {\r\n             "networkInterfaceConfigurations":[\r\n               {\r\n                 "name":"",\r\n                 "primary":null,\r\n                 "ipConfigurations":[\r\n                   {\r\n                     "name":"",\r\n                     "subnet":{\r\n                       "id":""\r\n                     },\r\n                     "applicationGatewayBackendAddressPools":[\r\n                       {\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "loadBalancerBackendAddressPools":[\r\n                       {\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "loadBalancerInboundNatPools":[\r\n                       {\r\n                         "id":""\r\n                       }\r\n                     ],\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "id":""\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--network-interface-configurations', $('Remove the network-interface-configurations value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/networkProfile';
    var anySubItem = false || options.networkInterfaceConfigurations;
    if (anySubItem) {
      var subItemPath = null;
      if (options.networkInterfaceConfigurations) {
        subItemPath = options.path + '/networkInterfaceConfigurations';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set network-interface-configurations
  var catparametersCreateOrUpdateVirtualMachineScaleSetsNetworkInterfaceConfigurations0VMPnPnIC = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsNetworkInterfaceConfigurations0VMPnPnIC = catparametersCreateOrUpdateVirtualMachineScaleSetsNetworkInterfaceConfigurations0VMPnPnIC.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsNetworkInterfaceConfigurations0VMPnPnIC = parametersCreateOrUpdateVirtualMachineScaleSetsNetworkInterfaceConfigurations0VMPnPnIC.category('network-interface-configurations')
  .description($('Commands to configure network-interface-configurations of vmss in config file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsNetworkInterfaceConfigurations0VMPnPnIC.command('set')
  .description($('Set network-interface-configurations in config string or files, e.g. \r\n         {\r\n           ...\r\n           "networkInterfaceConfigurations" : {\r\n             "name":"",\r\n             "primary":null,\r\n             "ipConfigurations":[\r\n               {\r\n                 "name":"",\r\n                 "subnet":{\r\n                   "id":""\r\n                 },\r\n                 "applicationGatewayBackendAddressPools":[\r\n                   {\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "loadBalancerBackendAddressPools":[\r\n                   {\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "loadBalancerInboundNatPools":[\r\n                   {\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "id":""\r\n               }\r\n             ],\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--name <name>', $('Set the name value.'))
  .option('--primary <primary>', $('Set the primary value.'))
  .option('--ip-configurations <ipConfigurations>', $('Set the ip-configurations value.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'primary';
    if (options.primary) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.primary);
      cli.output.verbose('================================================');
      if (options.parse && options.primary) {
        options.primary = JSON.parse(options.primary);
      }
      options.primary = JSON.parse(options.primary);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.primary}]);
    }
    paramPath = options.path + '/' + 'ipConfigurations';
    if (options.ipConfigurations) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.ipConfigurations);
      cli.output.verbose('================================================');
      if (options.parse && options.ipConfigurations) {
        options.ipConfigurations = JSON.parse(options.ipConfigurations);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.ipConfigurations}]);
    }
    paramPath = options.path + '/' + 'id';
    if (options.id) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.id);
      cli.output.verbose('================================================');
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete network-interface-configurations
  var catparametersCreateOrUpdateVirtualMachineScaleSetsNetworkInterfaceConfigurations1VMPnPnIC = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsNetworkInterfaceConfigurations1VMPnPnIC = catparametersCreateOrUpdateVirtualMachineScaleSetsNetworkInterfaceConfigurations1VMPnPnIC.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsNetworkInterfaceConfigurations1VMPnPnIC = parametersCreateOrUpdateVirtualMachineScaleSetsNetworkInterfaceConfigurations1VMPnPnIC.category('network-interface-configurations')
  .description($('Commands to configure network-interface-configurations of vmss in config file.'));
  deleteparametersCreateOrUpdateVirtualMachineScaleSetsNetworkInterfaceConfigurations1VMPnPnIC.command('delete')
  .description($('Remove network-interface-configurations in config string or files, e.g. \r\n         {\r\n           ...\r\n           "networkInterfaceConfigurations" : {\r\n             "name":"",\r\n             "primary":null,\r\n             "ipConfigurations":[\r\n               {\r\n                 "name":"",\r\n                 "subnet":{\r\n                   "id":""\r\n                 },\r\n                 "applicationGatewayBackendAddressPools":[\r\n                   {\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "loadBalancerBackendAddressPools":[\r\n                   {\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "loadBalancerInboundNatPools":[\r\n                   {\r\n                     "id":""\r\n                   }\r\n                 ],\r\n                 "id":""\r\n               }\r\n             ],\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--name', $('Remove the name value.'))
  .option('--primary', $('Remove the primary value.'))
  .option('--ip-configurations', $('Remove the ip-configurations value.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.primary || options.ipConfigurations || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.primary) {
        subItemPath = options.path + '/primary';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.ipConfigurations) {
        subItemPath = options.path + '/ipConfigurations';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set ip-configurations
  var catparametersCreateOrUpdateVirtualMachineScaleSetsIpConfigurations0VMPnPnICICIiC = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsIpConfigurations0VMPnPnICICIiC = catparametersCreateOrUpdateVirtualMachineScaleSetsIpConfigurations0VMPnPnICICIiC.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsIpConfigurations0VMPnPnICICIiC = parametersCreateOrUpdateVirtualMachineScaleSetsIpConfigurations0VMPnPnICICIiC.category('ip-configurations')
  .description($('Commands to configure ip-configurations of vmss in config file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsIpConfigurations0VMPnPnICICIiC.command('set')
  .description($('Set ip-configurations in config string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "subnet":{\r\n               "id":""\r\n             },\r\n             "applicationGatewayBackendAddressPools":[\r\n               {\r\n                 "id":""\r\n               }\r\n             ],\r\n             "loadBalancerBackendAddressPools":[\r\n               {\r\n                 "id":""\r\n               }\r\n             ],\r\n             "loadBalancerInboundNatPools":[\r\n               {\r\n                 "id":""\r\n               }\r\n             ],\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--network-interface-configurations-index <network-interface-configurations-index>', $('Indexer: network-interface-configurations-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--name <name>', $('Set the name value.'))
  .option('--subnet <subnet>', $('Set the subnet value.'))
  .option('--application-gateway-backend-address-pools <applicationGatewayBackendAddressPools>', $('Set the application-gateway-backend-address-pools value.'))
  .option('--load-balancer-backend-address-pools <loadBalancerBackendAddressPools>', $('Set the load-balancer-backend-address-pools value.'))
  .option('--load-balancer-inbound-nat-pools <loadBalancerInboundNatPools>', $('Set the load-balancer-inbound-nat-pools value.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/' + options.networkInterfaceConfigurationsIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'subnet';
    if (options.subnet) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.subnet);
      cli.output.verbose('================================================');
      if (options.parse && options.subnet) {
        options.subnet = JSON.parse(options.subnet);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.subnet}]);
    }
    paramPath = options.path + '/' + 'applicationGatewayBackendAddressPools';
    if (options.applicationGatewayBackendAddressPools) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.applicationGatewayBackendAddressPools);
      cli.output.verbose('================================================');
      if (options.parse && options.applicationGatewayBackendAddressPools) {
        options.applicationGatewayBackendAddressPools = JSON.parse(options.applicationGatewayBackendAddressPools);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.applicationGatewayBackendAddressPools}]);
    }
    paramPath = options.path + '/' + 'loadBalancerBackendAddressPools';
    if (options.loadBalancerBackendAddressPools) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.loadBalancerBackendAddressPools);
      cli.output.verbose('================================================');
      if (options.parse && options.loadBalancerBackendAddressPools) {
        options.loadBalancerBackendAddressPools = JSON.parse(options.loadBalancerBackendAddressPools);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerBackendAddressPools}]);
    }
    paramPath = options.path + '/' + 'loadBalancerInboundNatPools';
    if (options.loadBalancerInboundNatPools) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.loadBalancerInboundNatPools);
      cli.output.verbose('================================================');
      if (options.parse && options.loadBalancerInboundNatPools) {
        options.loadBalancerInboundNatPools = JSON.parse(options.loadBalancerInboundNatPools);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.loadBalancerInboundNatPools}]);
    }
    paramPath = options.path + '/' + 'id';
    if (options.id) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.id);
      cli.output.verbose('================================================');
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete ip-configurations
  var catparametersCreateOrUpdateVirtualMachineScaleSetsIpConfigurations1VMPnPnICICIiC = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsIpConfigurations1VMPnPnICICIiC = catparametersCreateOrUpdateVirtualMachineScaleSetsIpConfigurations1VMPnPnICICIiC.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsIpConfigurations1VMPnPnICICIiC = parametersCreateOrUpdateVirtualMachineScaleSetsIpConfigurations1VMPnPnICICIiC.category('ip-configurations')
  .description($('Commands to configure ip-configurations of vmss in config file.'));
  deleteparametersCreateOrUpdateVirtualMachineScaleSetsIpConfigurations1VMPnPnICICIiC.command('delete')
  .description($('Remove ip-configurations in config string or files, e.g. \r\n         {\r\n           ...\r\n           "ipConfigurations" : {\r\n             "name":"",\r\n             "subnet":{\r\n               "id":""\r\n             },\r\n             "applicationGatewayBackendAddressPools":[\r\n               {\r\n                 "id":""\r\n               }\r\n             ],\r\n             "loadBalancerBackendAddressPools":[\r\n               {\r\n                 "id":""\r\n               }\r\n             ],\r\n             "loadBalancerInboundNatPools":[\r\n               {\r\n                 "id":""\r\n               }\r\n             ],\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--network-interface-configurations-index <network-interface-configurations-index>', $('Indexer: network-interface-configurations-index.'))
  .option('--name', $('Remove the name value.'))
  .option('--subnet', $('Remove the subnet value.'))
  .option('--application-gateway-backend-address-pools', $('Remove the application-gateway-backend-address-pools value.'))
  .option('--load-balancer-backend-address-pools', $('Remove the load-balancer-backend-address-pools value.'))
  .option('--load-balancer-inbound-nat-pools', $('Remove the load-balancer-inbound-nat-pools value.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/' + options.networkInterfaceConfigurationsIndex + '/ipConfigurations' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.subnet || options.applicationGatewayBackendAddressPools || options.loadBalancerBackendAddressPools || options.loadBalancerInboundNatPools || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.subnet) {
        subItemPath = options.path + '/subnet';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.applicationGatewayBackendAddressPools) {
        subItemPath = options.path + '/applicationGatewayBackendAddressPools';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancerBackendAddressPools) {
        subItemPath = options.path + '/loadBalancerBackendAddressPools';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.loadBalancerInboundNatPools) {
        subItemPath = options.path + '/loadBalancerInboundNatPools';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set subnet
  var catparametersCreateOrUpdateVirtualMachineScaleSetsSubnet0VMPnPnICICIiCCIs = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsSubnet0VMPnPnICICIiCCIs = catparametersCreateOrUpdateVirtualMachineScaleSetsSubnet0VMPnPnICICIiCCIs.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsSubnet0VMPnPnICICIiCCIs = parametersCreateOrUpdateVirtualMachineScaleSetsSubnet0VMPnPnICICIiCCIs.category('subnet')
  .description($('Commands to configure subnet of vmss in config file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsSubnet0VMPnPnICICIiCCIs.command('set')
  .description($('Set subnet in config string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interface-configurations-index <network-interface-configurations-index>', $('Indexer: network-interface-configurations-index.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/' + options.networkInterfaceConfigurationsIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'id';
    if (options.id) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.id);
      cli.output.verbose('================================================');
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete subnet
  var catparametersCreateOrUpdateVirtualMachineScaleSetsSubnet1VMPnPnICICIiCCIs = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsSubnet1VMPnPnICICIiCCIs = catparametersCreateOrUpdateVirtualMachineScaleSetsSubnet1VMPnPnICICIiCCIs.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsSubnet1VMPnPnICICIiCCIs = parametersCreateOrUpdateVirtualMachineScaleSetsSubnet1VMPnPnICICIiCCIs.category('subnet')
  .description($('Commands to configure subnet of vmss in config file.'));
  deleteparametersCreateOrUpdateVirtualMachineScaleSetsSubnet1VMPnPnICICIiCCIs.command('delete')
  .description($('Remove subnet in config string or files, e.g. \r\n         {\r\n           ...\r\n           "subnet" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interface-configurations-index <network-interface-configurations-index>', $('Indexer: network-interface-configurations-index.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/' + options.networkInterfaceConfigurationsIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/subnet';
    var anySubItem = false || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set application-gateway-backend-address-pools
  var catparametersCreateOrUpdateVirtualMachineScaleSetsApplicationGatewayBackendAddressPools0VMPnPnICICIiCCIaGBAP = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsApplicationGatewayBackendAddressPools0VMPnPnICICIiCCIaGBAP = catparametersCreateOrUpdateVirtualMachineScaleSetsApplicationGatewayBackendAddressPools0VMPnPnICICIiCCIaGBAP.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsApplicationGatewayBackendAddressPools0VMPnPnICICIiCCIaGBAP = parametersCreateOrUpdateVirtualMachineScaleSetsApplicationGatewayBackendAddressPools0VMPnPnICICIiCCIaGBAP.category('application-gateway-backend-address-pools')
  .description($('Commands to configure application-gateway-backend-address-pools of vmss in config file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsApplicationGatewayBackendAddressPools0VMPnPnICICIiCCIaGBAP.command('set')
  .description($('Set application-gateway-backend-address-pools in config string or files, e.g. \r\n         {\r\n           ...\r\n           "applicationGatewayBackendAddressPools" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interface-configurations-index <network-interface-configurations-index>', $('Indexer: network-interface-configurations-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/' + options.networkInterfaceConfigurationsIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/applicationGatewayBackendAddressPools' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'id';
    if (options.id) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.id);
      cli.output.verbose('================================================');
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete application-gateway-backend-address-pools
  var catparametersCreateOrUpdateVirtualMachineScaleSetsApplicationGatewayBackendAddressPools1VMPnPnICICIiCCIaGBAP = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsApplicationGatewayBackendAddressPools1VMPnPnICICIiCCIaGBAP = catparametersCreateOrUpdateVirtualMachineScaleSetsApplicationGatewayBackendAddressPools1VMPnPnICICIiCCIaGBAP.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsApplicationGatewayBackendAddressPools1VMPnPnICICIiCCIaGBAP = parametersCreateOrUpdateVirtualMachineScaleSetsApplicationGatewayBackendAddressPools1VMPnPnICICIiCCIaGBAP.category('application-gateway-backend-address-pools')
  .description($('Commands to configure application-gateway-backend-address-pools of vmss in config file.'));
  deleteparametersCreateOrUpdateVirtualMachineScaleSetsApplicationGatewayBackendAddressPools1VMPnPnICICIiCCIaGBAP.command('delete')
  .description($('Remove application-gateway-backend-address-pools in config string or files, e.g. \r\n         {\r\n           ...\r\n           "applicationGatewayBackendAddressPools" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interface-configurations-index <network-interface-configurations-index>', $('Indexer: network-interface-configurations-index.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/' + options.networkInterfaceConfigurationsIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/applicationGatewayBackendAddressPools' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set load-balancer-backend-address-pools
  var catparametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerBackendAddressPools0VMPnPnICICIiCCIlBBAP = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerBackendAddressPools0VMPnPnICICIiCCIlBBAP = catparametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerBackendAddressPools0VMPnPnICICIiCCIlBBAP.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerBackendAddressPools0VMPnPnICICIiCCIlBBAP = parametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerBackendAddressPools0VMPnPnICICIiCCIlBBAP.category('load-balancer-backend-address-pools')
  .description($('Commands to configure load-balancer-backend-address-pools of vmss in config file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerBackendAddressPools0VMPnPnICICIiCCIlBBAP.command('set')
  .description($('Set load-balancer-backend-address-pools in config string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerBackendAddressPools" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interface-configurations-index <network-interface-configurations-index>', $('Indexer: network-interface-configurations-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/' + options.networkInterfaceConfigurationsIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'id';
    if (options.id) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.id);
      cli.output.verbose('================================================');
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete load-balancer-backend-address-pools
  var catparametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerBackendAddressPools1VMPnPnICICIiCCIlBBAP = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerBackendAddressPools1VMPnPnICICIiCCIlBBAP = catparametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerBackendAddressPools1VMPnPnICICIiCCIlBBAP.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerBackendAddressPools1VMPnPnICICIiCCIlBBAP = parametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerBackendAddressPools1VMPnPnICICIiCCIlBBAP.category('load-balancer-backend-address-pools')
  .description($('Commands to configure load-balancer-backend-address-pools of vmss in config file.'));
  deleteparametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerBackendAddressPools1VMPnPnICICIiCCIlBBAP.command('delete')
  .description($('Remove load-balancer-backend-address-pools in config string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerBackendAddressPools" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interface-configurations-index <network-interface-configurations-index>', $('Indexer: network-interface-configurations-index.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/' + options.networkInterfaceConfigurationsIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerBackendAddressPools' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set load-balancer-inbound-nat-pools
  var catparametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerInboundNatPools0VMPnPnICICIiCCIlBINP = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerInboundNatPools0VMPnPnICICIiCCIlBINP = catparametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerInboundNatPools0VMPnPnICICIiCCIlBINP.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerInboundNatPools0VMPnPnICICIiCCIlBINP = parametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerInboundNatPools0VMPnPnICICIiCCIlBINP.category('load-balancer-inbound-nat-pools')
  .description($('Commands to configure load-balancer-inbound-nat-pools of vmss in config file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerInboundNatPools0VMPnPnICICIiCCIlBINP.command('set')
  .description($('Set load-balancer-inbound-nat-pools in config string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerInboundNatPools" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interface-configurations-index <network-interface-configurations-index>', $('Indexer: network-interface-configurations-index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/' + options.networkInterfaceConfigurationsIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatPools' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'id';
    if (options.id) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.id);
      cli.output.verbose('================================================');
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete load-balancer-inbound-nat-pools
  var catparametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerInboundNatPools1VMPnPnICICIiCCIlBINP = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerInboundNatPools1VMPnPnICICIiCCIlBINP = catparametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerInboundNatPools1VMPnPnICICIiCCIlBINP.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerInboundNatPools1VMPnPnICICIiCCIlBINP = parametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerInboundNatPools1VMPnPnICICIiCCIlBINP.category('load-balancer-inbound-nat-pools')
  .description($('Commands to configure load-balancer-inbound-nat-pools of vmss in config file.'));
  deleteparametersCreateOrUpdateVirtualMachineScaleSetsLoadBalancerInboundNatPools1VMPnPnICICIiCCIlBINP.command('delete')
  .description($('Remove load-balancer-inbound-nat-pools in config string or files, e.g. \r\n         {\r\n           ...\r\n           "loadBalancerInboundNatPools" : {\r\n             "id":""\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--ip-configurations-index <ip-configurations-index>', $('Indexer: ip-configurations-index.'))
  .option('--network-interface-configurations-index <network-interface-configurations-index>', $('Indexer: network-interface-configurations-index.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/networkProfile/networkInterfaceConfigurations/' + options.networkInterfaceConfigurationsIndex + '/ipConfigurations/' + options.ipConfigurationsIndex + '/loadBalancerInboundNatPools' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set extension-profile
  var catparametersCreateOrUpdateVirtualMachineScaleSetsExtensionProfile0VMPeP = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsExtensionProfile0VMPeP = catparametersCreateOrUpdateVirtualMachineScaleSetsExtensionProfile0VMPeP.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsExtensionProfile0VMPeP = parametersCreateOrUpdateVirtualMachineScaleSetsExtensionProfile0VMPeP.category('extension-profile')
  .description($('Commands to configure extension-profile of vmss in config file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsExtensionProfile0VMPeP.command('set')
  .description($('Set extension-profile in config string or files, e.g. \r\n         {\r\n           ...\r\n           "extensionProfile" : {\r\n             "extensions":[\r\n               {\r\n                 "name":"",\r\n                 "publisher":"",\r\n                 "type":"",\r\n                 "typeHandlerVersion":"",\r\n                 "autoUpgradeMinorVersion":null,\r\n                 "settings":{\r\n                 },\r\n                 "protectedSettings":{\r\n                 },\r\n                 "provisioningState":"",\r\n                 "id":null\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--extensions <extensions>', $('Set the extensions value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/extensionProfile';
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    var paramPath = options.path + '/' + 'extensions';
    if (options.extensions) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.extensions);
      cli.output.verbose('================================================');
      if (options.parse && options.extensions) {
        options.extensions = JSON.parse(options.extensions);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.extensions}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete extension-profile
  var catparametersCreateOrUpdateVirtualMachineScaleSetsExtensionProfile1VMPeP = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsExtensionProfile1VMPeP = catparametersCreateOrUpdateVirtualMachineScaleSetsExtensionProfile1VMPeP.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsExtensionProfile1VMPeP = parametersCreateOrUpdateVirtualMachineScaleSetsExtensionProfile1VMPeP.category('extension-profile')
  .description($('Commands to configure extension-profile of vmss in config file.'));
  deleteparametersCreateOrUpdateVirtualMachineScaleSetsExtensionProfile1VMPeP.command('delete')
  .description($('Remove extension-profile in config string or files, e.g. \r\n         {\r\n           ...\r\n           "extensionProfile" : {\r\n             "extensions":[\r\n               {\r\n                 "name":"",\r\n                 "publisher":"",\r\n                 "type":"",\r\n                 "typeHandlerVersion":"",\r\n                 "autoUpgradeMinorVersion":null,\r\n                 "settings":{\r\n                 },\r\n                 "protectedSettings":{\r\n                 },\r\n                 "provisioningState":"",\r\n                 "id":null\r\n               }\r\n             ]\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--extensions', $('Remove the extensions value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/extensionProfile';
    var anySubItem = false || options.extensions;
    if (anySubItem) {
      var subItemPath = null;
      if (options.extensions) {
        subItemPath = options.path + '/extensions';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });
  //config set extensions
  var catparametersCreateOrUpdateVirtualMachineScaleSetsExtensions0VMPePe = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsExtensions0VMPePe = catparametersCreateOrUpdateVirtualMachineScaleSetsExtensions0VMPePe.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var setparametersCreateOrUpdateVirtualMachineScaleSetsExtensions0VMPePe = parametersCreateOrUpdateVirtualMachineScaleSetsExtensions0VMPePe.category('extensions')
  .description($('Commands to configure extensions of vmss in config file.'));
  setparametersCreateOrUpdateVirtualMachineScaleSetsExtensions0VMPePe.command('set')
  .description($('Set extensions in config string or files, e.g. \r\n         {\r\n           ...\r\n           "extensions" : {\r\n             "name":"",\r\n             "publisher":"",\r\n             "type":"",\r\n             "typeHandlerVersion":"",\r\n             "autoUpgradeMinorVersion":null,\r\n             "settings":{\r\n             },\r\n             "protectedSettings":{\r\n             },\r\n             "provisioningState":"",\r\n             "id":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--value <value>', $('The input string value for the indexed item.'))
  .option('--parse', $('Parse the input string, i.e. str, for parameters to a JSON object, e.g. JSON.parse(str).'))
  .option('--name <name>', $('Set the name value.'))
  .option('--publisher <publisher>', $('Set the publisher value.'))
  .option('--type <type>', $('Set the type value.'))
  .option('--type-handler-version <typeHandlerVersion>', $('Set the type-handler-version value.'))
  .option('--auto-upgrade-minor-version <autoUpgradeMinorVersion>', $('Set the auto-upgrade-minor-version value.'))
  .option('--settings <settings>', $('Set the settings value.'))
  .option('--protected-settings <protectedSettings>', $('Set the protected-settings value.'))
  .option('--provisioning-state <provisioningState>', $('Set the provisioning-state value.'))
  .option('--id <id>', $('Set the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'replace';
    options.path = '/virtualMachineProfile/extensionProfile/extensions' + (options.index ? ('/' + options.index) : '');
    var error = jsonpatch.validate([{op: 'remove', path: options.path}], parametersObj);
    if (typeof error !== 'undefined') {
      jsonpatch.apply(parametersObj, [{op: 'add', path: options.path, value: {}}]);
    }
    if (options.value) {
      cli.output.verbose(options.value);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path, value: options.value}]);
    }
    var paramPath = options.path + '/' + 'name';
    if (options.name) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.name);
      cli.output.verbose('================================================');
      if (options.parse && options.name) {
        options.name = JSON.parse(options.name);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.name}]);
    }
    paramPath = options.path + '/' + 'publisher';
    if (options.publisher) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.publisher);
      cli.output.verbose('================================================');
      if (options.parse && options.publisher) {
        options.publisher = JSON.parse(options.publisher);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.publisher}]);
    }
    paramPath = options.path + '/' + 'type';
    if (options.type) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.type);
      cli.output.verbose('================================================');
      if (options.parse && options.type) {
        options.type = JSON.parse(options.type);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.type}]);
    }
    paramPath = options.path + '/' + 'typeHandlerVersion';
    if (options.typeHandlerVersion) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.typeHandlerVersion);
      cli.output.verbose('================================================');
      if (options.parse && options.typeHandlerVersion) {
        options.typeHandlerVersion = JSON.parse(options.typeHandlerVersion);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.typeHandlerVersion}]);
    }
    paramPath = options.path + '/' + 'autoUpgradeMinorVersion';
    if (options.autoUpgradeMinorVersion) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.autoUpgradeMinorVersion);
      cli.output.verbose('================================================');
      if (options.parse && options.autoUpgradeMinorVersion) {
        options.autoUpgradeMinorVersion = JSON.parse(options.autoUpgradeMinorVersion);
      }
      options.autoUpgradeMinorVersion = JSON.parse(options.autoUpgradeMinorVersion);
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.autoUpgradeMinorVersion}]);
    }
    paramPath = options.path + '/' + 'settings';
    if (options.settings) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.settings);
      cli.output.verbose('================================================');
      if (options.parse && options.settings) {
        options.settings = JSON.parse(options.settings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.settings}]);
    }
    paramPath = options.path + '/' + 'protectedSettings';
    if (options.protectedSettings) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.protectedSettings);
      cli.output.verbose('================================================');
      if (options.parse && options.protectedSettings) {
        options.protectedSettings = JSON.parse(options.protectedSettings);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.protectedSettings}]);
    }
    paramPath = options.path + '/' + 'provisioningState';
    if (options.provisioningState) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.provisioningState);
      cli.output.verbose('================================================');
      if (options.parse && options.provisioningState) {
        options.provisioningState = JSON.parse(options.provisioningState);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.provisioningState}]);
    }
    paramPath = options.path + '/' + 'id';
    if (options.id) {
      cli.output.verbose('================================================');
      cli.output.verbose('Path  : ' + paramPath);
      cli.output.verbose('Value : ' + options.id);
      cli.output.verbose('================================================');
      if (options.parse && options.id) {
        options.id = JSON.parse(options.id);
      }
      jsonpatch.apply(parametersObj, [{op: options.operation, path: paramPath, value: options.id}]);
    }
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

  //config delete extensions
  var catparametersCreateOrUpdateVirtualMachineScaleSetsExtensions1VMPePe = cli.category('vmss');
  var parametersCreateOrUpdateVirtualMachineScaleSetsExtensions1VMPePe = catparametersCreateOrUpdateVirtualMachineScaleSetsExtensions1VMPePe.category('config')
  .description($('Commands to manage configuration of virtual-machine-scale-sets in the parameter file.'));
  var deleteparametersCreateOrUpdateVirtualMachineScaleSetsExtensions1VMPePe = parametersCreateOrUpdateVirtualMachineScaleSetsExtensions1VMPePe.category('extensions')
  .description($('Commands to configure extensions of vmss in config file.'));
  deleteparametersCreateOrUpdateVirtualMachineScaleSetsExtensions1VMPePe.command('delete')
  .description($('Remove extensions in config string or files, e.g. \r\n         {\r\n           ...\r\n           "extensions" : {\r\n             "name":"",\r\n             "publisher":"",\r\n             "type":"",\r\n             "typeHandlerVersion":"",\r\n             "autoUpgradeMinorVersion":null,\r\n             "settings":{\r\n             },\r\n             "protectedSettings":{\r\n             },\r\n             "provisioningState":"",\r\n             "id":null\r\n           }\r\n           ...\r\n         }\r\n\r\n         There are two sets of commands:\r\n           1) function commands that are used to manage Azure resources in the cloud, and \r\n           2) parameter commands that generate & edit input files for the other set of commands.\r\n         For example, \'vmss show/list/stop\' are the function commands that call get, list and stop operations of \r\n         virtual machine scale set, whereas \'vmss config * generate/create/set/delete/add\' commands \r\n         are used to configure the input parameter file. The \'vmss config\' command takes a parameter \r\n         file as for the VM scale set configuration, and creates it online.'))
  .usage('[options]')
  .option('--parameter-file <parameter-file>', $('The parameter file path.'))
  .option('--index <index>', $('Indexer: index.'))
  .option('--name', $('Remove the name value.'))
  .option('--publisher', $('Remove the publisher value.'))
  .option('--type', $('Remove the type value.'))
  .option('--type-handler-version', $('Remove the type-handler-version value.'))
  .option('--auto-upgrade-minor-version', $('Remove the auto-upgrade-minor-version value.'))
  .option('--settings', $('Remove the settings value.'))
  .option('--protected-settings', $('Remove the protected-settings value.'))
  .option('--provisioning-state', $('Remove the provisioning-state value.'))
  .option('--id', $('Remove the id value.'))
  .execute(function(options, _) {
    cli.output.verbose(JSON.stringify(options), _);
    if (!options.parameterFile) {
      options.parameterFile = cli.interaction.promptIfNotGiven($('parameter-file : '), options.parameterFile, _);
    }

    cli.output.verbose('=====================================');
    cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
    cli.output.verbose('=====================================');
    var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
    var parametersObj = JSON.parse(fileContent);
    cli.output.verbose('JSON object:');
    cli.output.verbose(JSON.stringify(parametersObj));
    options.operation = 'remove';
    options.path = '/virtualMachineProfile/extensionProfile/extensions' + (options.index ? ('/' + options.index) : '');
    var anySubItem = false || options.name || options.publisher || options.type || options.typeHandlerVersion || options.autoUpgradeMinorVersion || options.settings || options.protectedSettings || options.provisioningState || options.id;
    if (anySubItem) {
      var subItemPath = null;
      if (options.name) {
        subItemPath = options.path + '/name';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.publisher) {
        subItemPath = options.path + '/publisher';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.type) {
        subItemPath = options.path + '/type';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.typeHandlerVersion) {
        subItemPath = options.path + '/typeHandlerVersion';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.autoUpgradeMinorVersion) {
        subItemPath = options.path + '/autoUpgradeMinorVersion';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.settings) {
        subItemPath = options.path + '/settings';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.protectedSettings) {
        subItemPath = options.path + '/protectedSettings';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.provisioningState) {
        subItemPath = options.path + '/provisioningState';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
      if (options.id) {
        subItemPath = options.path + '/id';
        jsonpatch.apply(parametersObj, [{op: options.operation, path: subItemPath}]);
      }
    }
    else {
      jsonpatch.apply(parametersObj, [{op: options.operation, path: options.path}]);
    }
    
    var updatedContent = JSON.stringify(parametersObj);
    cli.output.verbose('=====================================');
    cli.output.verbose('JSON object (updated):');
    cli.output.verbose(JSON.stringify(parametersObj));
    cli.output.verbose('=====================================');
    fs.writeFileSync(options.parameterFile, beautify(updatedContent));
    cli.output.verbose('=====================================');
    cli.output.verbose('Parameter file updated at: ' + options.parameterFile);
    cli.output.verbose('=====================================');
  });

/*
  VirtualMachineScaleSets Deallocate
  --resource-group
  --name
  --instance-ids
*/
  var virtualMachineScaleSetsDeallocate = cli.category('vmss')
  .description($('Commands to manage your virtual machine scale sets.  '));
  virtualMachineScaleSetsDeallocate.command('deallocate [resource-group] [name] [instance-ids]')
  .description($('Deallocates specific virtual machines in a VM scale set. Shuts down the virtual machines and releases the compute resources. You are not billed for the compute resources that this virtual machine scale set deallocates.'))
  .usage('[options] <resource-group> <name> <instance-ids>')
  .option('-g, --resource-group <resource-group>', $('resource-group'))
  .option('-n, --name <name>', $('name'))
  .option('--instance-ids <instance-ids>', $('instance-ids'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(resourceGroup, name, instanceIds, options, _) {
    if (!resourceGroup) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource-group : '), resourceGroup, _);
    }

    cli.output.verbose('resourceGroup = ' + resourceGroup);
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    cli.output.verbose('instanceIds = ' + instanceIds);
    var instanceIdsObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      instanceIdsObj = JSON.parse(fileContent);
    }
    else {
      var instanceIdsValArr = instanceIds ? instanceIds.split(',') : [];
      cli.output.verbose('instanceIds : ' + instanceIdsValArr);
      instanceIdsObj = [];
      for (var item in instanceIdsValArr) {
        instanceIdsObj.push(instanceIdsValArr[item]);
      }
      instanceIdsObj = { 'instanceIds' : instanceIdsObj};
    }
    cli.output.verbose('instanceIdsObj = ' + JSON.stringify(instanceIdsObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSets.deallocate(resourceGroup, name, instanceIdsObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachineScaleSets Delete
  --resource-group
  --name
*/
  var virtualMachineScaleSetsDelete = cli.category('vmss')
  .description($('Commands to manage your virtual machine scale sets.  '));
  virtualMachineScaleSetsDelete.command('delete [resource-group] [name]')
  .description($('Deletes a VM scale set.'))
  .usage('[options] <resource-group> <name>')
  .option('-g, --resource-group <resource-group>', $('resource-group'))
  .option('-n, --name <name>', $('name'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(resourceGroup, name, options, _) {
    if (!resourceGroup) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource-group : '), resourceGroup, _);
    }

    cli.output.verbose('resourceGroup = ' + resourceGroup);
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSets.deleteMethod(resourceGroup, name, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachineScaleSets DeleteInstances
  --resource-group
  --name
  --instance-ids
*/
  var virtualMachineScaleSetsDeleteInstances = cli.category('vmss')
  .description($('Commands to manage your virtual machine scale sets.  '));
  virtualMachineScaleSetsDeleteInstances.command('delete-instances [resource-group] [name] [instance-ids]')
  .description($('Deletes virtual machines in a VM scale set.'))
  .usage('[options] <resource-group> <name> <instance-ids>')
  .option('-g, --resource-group <resource-group>', $('resource-group'))
  .option('-n, --name <name>', $('name'))
  .option('--instance-ids <instance-ids>', $('instance-ids'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(resourceGroup, name, instanceIds, options, _) {
    if (!resourceGroup) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource-group : '), resourceGroup, _);
    }

    cli.output.verbose('resourceGroup = ' + resourceGroup);
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    cli.output.verbose('instanceIds = ' + instanceIds);
    var instanceIdsObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      instanceIdsObj = JSON.parse(fileContent);
    }
    else {
      var instanceIdsValArr = instanceIds ? instanceIds.split(',') : [];
      cli.output.verbose('instanceIds : ' + instanceIdsValArr);
      instanceIdsObj = [];
      for (var item in instanceIdsValArr) {
        instanceIdsObj.push(instanceIdsValArr[item]);
      }
    }
    cli.output.verbose('instanceIdsObj = ' + JSON.stringify(instanceIdsObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSets.deleteInstances(resourceGroup, name, instanceIdsObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachineScaleSets Get
  --resource-group
  --name
*/
  var virtualMachineScaleSetsGet = cli.category('vmss')
  .description($('Commands to manage your virtual machine scale sets.  '));
  virtualMachineScaleSetsGet.command('show [resource-group] [name]')
  .description($('Display information about a virtual machine scale set.'))
  .usage('[options] <resource-group> <name>')
  .option('-g, --resource-group <resource-group>', $('resource-group'))
  .option('-n, --name <name>', $('name'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(resourceGroup, name, options, _) {
    if (!resourceGroup) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource-group : '), resourceGroup, _);
    }

    cli.output.verbose('resourceGroup = ' + resourceGroup);
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSets.get(resourceGroup, name, _);
    if (cli.output.format().json) {
      cli.output.json(result);
    }
    else {
      display(cli, result);
    }
  });
/*
  VirtualMachineScaleSets GetInstanceView
  --resource-group
  --name
*/
  var virtualMachineScaleSetsGetInstanceView = cli.category('vmss')
  .description($('Commands to manage your virtual machine scale sets.  '));
  virtualMachineScaleSetsGetInstanceView.command('get-instance-view [resource-group] [name]')
  .description($('Gets the status of a VM scale set instance.'))
  .usage('[options] <resource-group> <name>')
  .option('-g, --resource-group <resource-group>', $('resource-group'))
  .option('-n, --name <name>', $('name'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(resourceGroup, name, options, _) {
    if (!resourceGroup) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource-group : '), resourceGroup, _);
    }

    cli.output.verbose('resourceGroup = ' + resourceGroup);
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSets.getInstanceView(resourceGroup, name, _);
    if (cli.output.format().json) {
      cli.output.json(result);
    }
    else {
      display(cli, result);
    }
  });
/*
  VirtualMachineScaleSets List
  --resource-group
*/
  var virtualMachineScaleSetsList = cli.category('vmss')
  .description($('Commands to manage your virtual machine scale sets.  '));
  virtualMachineScaleSetsList.command('list [resource-group]')
  .description($('Gets a list of all VM scale sets under a resource group.'))
  .usage('[options] <resource-group>')
  .option('-g, --resource-group <resource-group>', $('resource-group'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(resourceGroup, options, _) {
    cli.output.verbose('resourceGroup = ' + resourceGroup);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = null;
    if (utils.stringIsNullOrEmpty(resourceGroup)) {
      result = computeManagementClient.virtualMachineScaleSets.listAll(_);
    }
    else {
      result = computeManagementClient.virtualMachineScaleSets.list(resourceGroup, _);
    }
    var nextPageLink = result.nextLink;
    while (nextPageLink) {
      var pageResult = computeManagementClient.virtualMachineScaleSets.listNext(nextPageLink, _);
      pageResult.forEach(function(item) {
        result.push(item);
      });
      nextPageLink = pageResult.nextLink;
    }

    if (cli.output.format().json) {
      cli.output.json(result);
    }
    else {
      cli.output.table(result, function (row, item) {
        var rgName = item.id ? utils.parseResourceReferenceUri(item.id).resourceGroupName : null;
        row.cell($('ResourceGroupName'), rgName);
        row.cell($('Name'), item.name);
        row.cell($('ProvisioningState'), item.provisioningState);
        row.cell($('Location'), item.location);
      });
    }
  });
/*
  VirtualMachineScaleSets ListSkus
  --resource-group
  --name
*/
  var virtualMachineScaleSetsListSkus = cli.category('vmss')
  .description($('Commands to manage your virtual machine scale sets.  '));
  virtualMachineScaleSetsListSkus.command('list-skus [resource-group] [name]')
  .description($('Gets a list of SKUs available for your VM scale set, including the minimum and maximum VM instances allowed for each SKU.'))
  .usage('[options] <resource-group> <name>')
  .option('-g, --resource-group <resource-group>', $('resource-group'))
  .option('-n, --name <name>', $('name'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(resourceGroup, name, options, _) {
    if (!resourceGroup) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource-group : '), resourceGroup, _);
    }

    cli.output.verbose('resourceGroup = ' + resourceGroup);
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSets.listSkus(resourceGroup, name, _);
    var nextPageLink = result.nextLink;
    while (nextPageLink) {
      var pageResult = computeManagementClient.virtualMachineScaleSets.listSkusNext(nextPageLink, _);
      pageResult.forEach(function(item) {
        result.push(item);
      });
      nextPageLink = pageResult.nextLink;
    }

    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachineScaleSets PowerOff
  --resource-group
  --name
  --instance-ids
*/
  var virtualMachineScaleSetsPowerOff = cli.category('vmss')
  .description($('Commands to manage your virtual machine scale sets.  '));
  virtualMachineScaleSetsPowerOff.command('power-off [resource-group] [name] [instance-ids]')
  .description($('Power off (stop) one or more virtual machines in a VM scale set. Note that resources are still attached and you are getting charged for the resources. Instead, use deallocate to release resources and avoid charges.'))
  .usage('[options] <resource-group> <name> <instance-ids>')
  .option('-g, --resource-group <resource-group>', $('resource-group'))
  .option('-n, --name <name>', $('name'))
  .option('--instance-ids <instance-ids>', $('instance-ids'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(resourceGroup, name, instanceIds, options, _) {
    if (!resourceGroup) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource-group : '), resourceGroup, _);
    }

    cli.output.verbose('resourceGroup = ' + resourceGroup);
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    cli.output.verbose('instanceIds = ' + instanceIds);
    var instanceIdsObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      instanceIdsObj = JSON.parse(fileContent);
    }
    else {
      var instanceIdsValArr = instanceIds ? instanceIds.split(',') : [];
      cli.output.verbose('instanceIds : ' + instanceIdsValArr);
      instanceIdsObj = [];
      for (var item in instanceIdsValArr) {
        instanceIdsObj.push(instanceIdsValArr[item]);
      }
      instanceIdsObj = { 'instanceIds' : instanceIdsObj};
    }
    cli.output.verbose('instanceIdsObj = ' + JSON.stringify(instanceIdsObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSets.powerOff(resourceGroup, name, instanceIdsObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachineScaleSets Reimage
  --resource-group
  --name
*/
  var virtualMachineScaleSetsReimage = cli.category('vmss')
  .description($('Commands to manage your virtual machine scale sets.  '));
  virtualMachineScaleSetsReimage.command('reimage [resource-group] [name]')
  .description($('Reimages (upgrade the operating system) one or more virtual machines in a VM scale set.'))
  .usage('[options] <resource-group> <name>')
  .option('-g, --resource-group <resource-group>', $('resource-group'))
  .option('-n, --name <name>', $('name'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(resourceGroup, name, options, _) {
    if (!resourceGroup) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource-group : '), resourceGroup, _);
    }

    cli.output.verbose('resourceGroup = ' + resourceGroup);
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSets.reimage(resourceGroup, name, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachineScaleSets ReimageAll
  --resource-group
  --name
*/
  var virtualMachineScaleSetsReimageAll = cli.category('vmss')
  .description($('Commands to manage your virtual machine scale sets.  '));
  virtualMachineScaleSetsReimageAll.command('reimage-all [resource-group] [name]')
  .description($('Reimages all the disks ( including data disks ) in the virtual machines in a VM scale set. This operation is only supported for managed disks.'))
  .usage('[options] <resource-group> <name>')
  .option('-g, --resource-group <resource-group>', $('resource-group'))
  .option('-n, --name <name>', $('name'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(resourceGroup, name, options, _) {
    if (!resourceGroup) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource-group : '), resourceGroup, _);
    }

    cli.output.verbose('resourceGroup = ' + resourceGroup);
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSets.reimageAll(resourceGroup, name, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachineScaleSets Restart
  --resource-group
  --name
  --instance-ids
*/
  var virtualMachineScaleSetsRestart = cli.category('vmss')
  .description($('Commands to manage your virtual machine scale sets.  '));
  virtualMachineScaleSetsRestart.command('restart [resource-group] [name] [instance-ids]')
  .description($('Restarts one or more virtual machines in a VM scale set.'))
  .usage('[options] <resource-group> <name> <instance-ids>')
  .option('-g, --resource-group <resource-group>', $('resource-group'))
  .option('-n, --name <name>', $('name'))
  .option('--instance-ids <instance-ids>', $('instance-ids'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(resourceGroup, name, instanceIds, options, _) {
    if (!resourceGroup) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource-group : '), resourceGroup, _);
    }

    cli.output.verbose('resourceGroup = ' + resourceGroup);
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    cli.output.verbose('instanceIds = ' + instanceIds);
    var instanceIdsObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      instanceIdsObj = JSON.parse(fileContent);
    }
    else {
      var instanceIdsValArr = instanceIds ? instanceIds.split(',') : [];
      cli.output.verbose('instanceIds : ' + instanceIdsValArr);
      instanceIdsObj = [];
      for (var item in instanceIdsValArr) {
        instanceIdsObj.push(instanceIdsValArr[item]);
      }
      instanceIdsObj = { 'instanceIds' : instanceIdsObj};
    }
    cli.output.verbose('instanceIdsObj = ' + JSON.stringify(instanceIdsObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSets.restart(resourceGroup, name, instanceIdsObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachineScaleSets Start
  --resource-group
  --name
  --instance-ids
*/
  var virtualMachineScaleSetsStart = cli.category('vmss')
  .description($('Commands to manage your virtual machine scale sets.  '));
  virtualMachineScaleSetsStart.command('start [resource-group] [name] [instance-ids]')
  .description($('Starts one or more virtual machines in a VM scale set.'))
  .usage('[options] <resource-group> <name> <instance-ids>')
  .option('-g, --resource-group <resource-group>', $('resource-group'))
  .option('-n, --name <name>', $('name'))
  .option('--instance-ids <instance-ids>', $('instance-ids'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(resourceGroup, name, instanceIds, options, _) {
    if (!resourceGroup) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource-group : '), resourceGroup, _);
    }

    cli.output.verbose('resourceGroup = ' + resourceGroup);
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    cli.output.verbose('instanceIds = ' + instanceIds);
    var instanceIdsObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      instanceIdsObj = JSON.parse(fileContent);
    }
    else {
      var instanceIdsValArr = instanceIds ? instanceIds.split(',') : [];
      cli.output.verbose('instanceIds : ' + instanceIdsValArr);
      instanceIdsObj = [];
      for (var item in instanceIdsValArr) {
        instanceIdsObj.push(instanceIdsValArr[item]);
      }
      instanceIdsObj = { 'instanceIds' : instanceIdsObj};
    }
    cli.output.verbose('instanceIdsObj = ' + JSON.stringify(instanceIdsObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSets.start(resourceGroup, name, instanceIdsObj, _);
    if (result) {
      cli.output.json(result);
    }
  });
/*
  VirtualMachineScaleSets UpdateInstances
  --resource-group
  --name
  --instance-ids
*/
  var virtualMachineScaleSetsUpdateInstances = cli.category('vmss')
  .description($('Commands to manage your virtual machine scale sets.  '));
  virtualMachineScaleSetsUpdateInstances.command('update-instances [resource-group] [name] [instance-ids]')
  .description($('Upgrades one or more virtual machines to the latest SKU set in the VM scale set model.'))
  .usage('[options] <resource-group> <name> <instance-ids>')
  .option('-g, --resource-group <resource-group>', $('resource-group'))
  .option('-n, --name <name>', $('name'))
  .option('--instance-ids <instance-ids>', $('instance-ids'))
  .option('-s, --subscription <subscription>', $('The subscription identifier'))
  .execute(function(resourceGroup, name, instanceIds, options, _) {
    if (!resourceGroup) {
      resourceGroup = cli.interaction.promptIfNotGiven($('resource-group : '), resourceGroup, _);
    }

    cli.output.verbose('resourceGroup = ' + resourceGroup);
    if (!name) {
      name = cli.interaction.promptIfNotGiven($('name : '), name, _);
    }

    cli.output.verbose('name = ' + name);
    cli.output.verbose('instanceIds = ' + instanceIds);
    var instanceIdsObj = null;
    if (options.parameterFile) {
      cli.output.verbose('Reading file content from: \"' + options.parameterFile + '\"');
      var fileContent = fs.readFileSync(options.parameterFile, 'utf8');
      instanceIdsObj = JSON.parse(fileContent);
    }
    else {
      var instanceIdsValArr = instanceIds ? instanceIds.split(',') : [];
      cli.output.verbose('instanceIds : ' + instanceIdsValArr);
      instanceIdsObj = [];
      for (var item in instanceIdsValArr) {
        instanceIdsObj.push(instanceIdsValArr[item]);
      }
    }
    cli.output.verbose('instanceIdsObj = ' + JSON.stringify(instanceIdsObj));
    var subscription = profile.current.getSubscription(options.subscription);
    var computeManagementClient = utils.createComputeManagementClient(subscription);
    var result = computeManagementClient.virtualMachineScaleSets.updateInstances(resourceGroup, name, instanceIdsObj, _);
    if (result) {
      cli.output.json(result);
    }
  });


};
